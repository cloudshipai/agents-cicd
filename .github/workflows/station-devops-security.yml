name: Station DevOps Security Audit

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  devops-security-audit:
    name: Station DevOps Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Load Station Security Environment
        run: |
          echo "üöÄ Loading Station DevOps Security Environment"
          # Pull the pre-built Station image from Docker Hub (public)
          docker pull epuerta18/station-default:latest
          docker tag epuerta18/station-default:latest station-default:latest
          echo "‚úÖ Station security environment ready"

      - name: Run Security Scanner Agent
        id: security_scan
        run: |
          docker run --rm \
            -v "$(pwd):/workspace" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
            station-default:latest bash -c "
            cd /workspace &&
            echo 'üîç Starting Security Scanner Agent...' &&
            stn sync default -i=false &&
            stn agent run 'Security Scanner' 'Scan /workspace for security vulnerabilities, focusing on terraform/, docker/, python/, and scripts/ directories. Detect secrets, misconfigurations, and provide remediation steps.'
          " > security_scan_output.txt 2>&1
          
          # Extract key findings from the output
          echo "SECURITY_SCAN_RESULTS<<EOF" >> $GITHUB_OUTPUT
          cat security_scan_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Run Terraform Auditor Agent  
        id: terraform_audit
        run: |
          docker run --rm \
            -v "$(pwd):/workspace" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
            station-default:latest bash -c "
            cd /workspace &&
            echo 'üèóÔ∏è Starting Terraform Auditor Agent...' &&
            stn sync default -i=false &&
            stn agent run 'Terraform Auditor' 'Analyze Terraform files in /workspace/terraform/ for security issues and best practices violations'
          " > terraform_audit_output.txt 2>&1
          
          # Extract key findings from the output
          echo "TERRAFORM_AUDIT_RESULTS<<EOF" >> $GITHUB_OUTPUT
          cat terraform_audit_output.txt >> $GITHUB_OUTPUT 
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Create Security Report Summary
        id: create_summary
        if: always()
        run: |
          # Extract key findings from outputs (first 1000 chars of each)
          SECURITY_SCAN_SUMMARY=$(echo "${{ steps.security_scan.outputs.SECURITY_SCAN_RESULTS }}" | head -c 1000)
          TERRAFORM_AUDIT_SUMMARY=$(echo "${{ steps.terraform_audit.outputs.TERRAFORM_AUDIT_RESULTS }}" | head -c 1000)
          
          # Count critical findings
          CRITICAL_COUNT=$(echo "${{ steps.security_scan.outputs.SECURITY_SCAN_RESULTS }}" | grep -i "critical\|failed\|error\|vulnerable" | wc -l || echo "0")
          
          # Create a concise security report
          cat > security_summary.md << EOF
          # üîí Station DevOps Security Audit Results
          
          **Audit completed:** $(date '+%Y-%m-%d %H:%M:%S UTC')
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Critical Issues Found:** $CRITICAL_COUNT
          
          ## üìä Executive Summary
          
          ‚úÖ **Security Scanner**: Comprehensive vulnerability analysis completed  
          ‚úÖ **Terraform Auditor**: Infrastructure security assessment completed  
          üìã **Full Report**: Available in workflow artifacts
          
          ## üîç Key Security Findings
          
          <details>
          <summary>Click to expand Security Scanner highlights (first 1000 chars)</summary>
          
          \`\`\`
          $SECURITY_SCAN_SUMMARY...
          \`\`\`
          
          </details>
          
          <details>
          <summary>Click to expand Terraform Auditor highlights (first 1000 chars)</summary>
          
          \`\`\`
          $TERRAFORM_AUDIT_SUMMARY...
          \`\`\`
          
          </details>
          
          ## üìÅ Full Reports
          
          üîó **Complete analysis available in [workflow artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**
          
          ---
          
          ü§ñ **Powered by Station DevOps Security Platform**
          - **Security Tools:** Checkov, TFLint, Bandit, Secret Detection  
          - **AI Analysis:** GPT-5 powered vulnerability assessment
          - **Container:** \`epuerta18/station-default:latest\`
          
          EOF
          
          echo "SECURITY_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          cat security_summary.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR with Security Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.create_summary.outputs.SECURITY_SUMMARY }}`
            })

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: station-security-reports
          path: |
            security-reports/
            security_scan_output.txt
            terraform_audit_output.txt
            security_summary.md
          retention-days: 30