[{"check_type": "terraform", "results": {"passed_checks": [{"check_id": "CKV_AWS_41", "bc_check_id": "BC_AWS_SECRETS_5", "check_name": "Ensure no hard coded AWS access key and secret key exists in provider", "check_result": {"result": "PASSED", "evaluated_keys": []}, "code_block": [[12, "provider \"aws\" {\n"], [13, "  region = \"us-west-2\"\n"], [14, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [12, 14], "resource": "aws.default", "evaluations": null, "check_class": "checkov.terraform.checks.provider.aws.credentials", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/secrets-policies/bc-aws-secrets-5", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_93", "bc_check_id": "BC_AWS_S3_24", "check_name": "Ensure S3 bucket policy does not lockout all but root user. (Prevent lockouts needing root account fixes)", "check_result": {"result": "PASSED", "evaluated_keys": ["policy"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.S3ProtectAgainstPolicyLockout", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-24", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_375", "bc_check_id": "BC_AWS_NETWORKING_98", "check_name": "Ensure AWS S3 bucket does not have global view ACL permissions enabled", "check_result": {"result": "PASSED", "evaluated_keys": []}, "code_block": [[31, "resource \"aws_s3_bucket_acl\" \"demo_bucket\" {\n"], [32, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [33, "  \n"], [34, "  # INSECURE: Public read access\n"], [35, "  acl = \"public-read\"\n"], [36, "  \n"], [37, "  depends_on = [aws_s3_bucket_ownership_controls.demo_bucket_acl_ownership]\n"], [38, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [31, 38], "resource": "aws_s3_bucket_acl.demo_bucket", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.S3GlobalViewACL", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-375", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_25", "bc_check_id": "BC_AWS_NETWORKING_2", "check_name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389", "check_result": {"result": "PASSED", "evaluated_keys": []}, "code_block": [[49, "resource \"aws_security_group\" \"web\" {\n"], [50, "  name        = \"web-security-group\"\n"], [51, "  description = \"Security group for web servers\"\n"], [52, "\n"], [53, "  # INSECURE: SSH open to world\n"], [54, "  ingress {\n"], [55, "    description = \"SSH\"\n"], [56, "    from_port   = 22\n"], [57, "    to_port     = 22\n"], [58, "    protocol    = \"tcp\"\n"], [59, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [60, "  }\n"], [61, "\n"], [62, "  # INSECURE: HTTP open to world without HTTPS\n"], [63, "  ingress {\n"], [64, "    description = \"HTTP\"\n"], [65, "    from_port   = 80\n"], [66, "    to_port     = 80\n"], [67, "    protocol    = \"tcp\"\n"], [68, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [69, "  }\n"], [70, "\n"], [71, "  # INSECURE: Wide port range open\n"], [72, "  ingress {\n"], [73, "    description = \"All ports\"\n"], [74, "    from_port   = 8000\n"], [75, "    to_port     = 9000\n"], [76, "    protocol    = \"tcp\"\n"], [77, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [78, "  }\n"], [79, "\n"], [80, "  egress {\n"], [81, "    from_port   = 0\n"], [82, "    to_port     = 0\n"], [83, "    protocol    = \"-1\"\n"], [84, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [85, "  }\n"], [86, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [49, 86], "resource": "aws_security_group.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedIngress3389", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-2", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_277", "bc_check_id": "BC_AWS_NETWORKING_78", "check_name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port -1", "check_result": {"result": "PASSED", "evaluated_keys": []}, "code_block": [[49, "resource \"aws_security_group\" \"web\" {\n"], [50, "  name        = \"web-security-group\"\n"], [51, "  description = \"Security group for web servers\"\n"], [52, "\n"], [53, "  # INSECURE: SSH open to world\n"], [54, "  ingress {\n"], [55, "    description = \"SSH\"\n"], [56, "    from_port   = 22\n"], [57, "    to_port     = 22\n"], [58, "    protocol    = \"tcp\"\n"], [59, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [60, "  }\n"], [61, "\n"], [62, "  # INSECURE: HTTP open to world without HTTPS\n"], [63, "  ingress {\n"], [64, "    description = \"HTTP\"\n"], [65, "    from_port   = 80\n"], [66, "    to_port     = 80\n"], [67, "    protocol    = \"tcp\"\n"], [68, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [69, "  }\n"], [70, "\n"], [71, "  # INSECURE: Wide port range open\n"], [72, "  ingress {\n"], [73, "    description = \"All ports\"\n"], [74, "    from_port   = 8000\n"], [75, "    to_port     = 9000\n"], [76, "    protocol    = \"tcp\"\n"], [77, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [78, "  }\n"], [79, "\n"], [80, "  egress {\n"], [81, "    from_port   = 0\n"], [82, "    to_port     = 0\n"], [83, "    protocol    = \"-1\"\n"], [84, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [85, "  }\n"], [86, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [49, 86], "resource": "aws_security_group.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedIngressAny", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-aws-security-group-does-not-allow-all-traffic-on-all-ports", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_88", "bc_check_id": "BC_AWS_PUBLIC_12", "check_name": "EC2 instance should not have public IP.", "check_result": {"result": "PASSED", "evaluated_keys": ["associate_public_ip_address"]}, "code_block": [[89, "resource \"aws_instance\" \"web\" {\n"], [90, "  ami           = \"ami-0c94855ba95b798c7\"  # Amazon Linux 2 in us-west-2\n"], [91, "  instance_type = \"t3.micro\"\n"], [92, "  \n"], [93, "  # INSECURE: No encryption for EBS\n"], [94, "  root_block_device {\n"], [95, "    volume_type = \"gp3\"\n"], [96, "    volume_size = 20\n"], [97, "    encrypted   = false  # INSECURE!\n"], [98, "  }\n"], [99, "\n"], [100, "  vpc_security_group_ids = [aws_security_group.web.id]\n"], [101, "\n"], [102, "  # INSECURE: Hardcoded user data (could contain secrets)\n"], [103, "  user_data = base64encode(<<-EOF\n"], [104, "              #!/bin/bash\n"], [105, "              yum update -y\n"], [106, "              yum install -y httpd\n"], [107, "              systemctl start httpd\n"], [108, "              systemctl enable httpd\n"], [109, "              echo '<h1>Demo Web Server</h1>' > /var/www/html/index.html\n"], [110, "              # INSECURE: Hardcoded API key (for testing secret detection)\n"], [111, "              export API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [112, "              EOF\n"], [113, "  )\n"], [114, "\n"], [115, "  tags = {\n"], [116, "    Name        = \"demo-web-server\"\n"], [117, "    Environment = \"testing\"\n"], [118, "    # INSECURE: Missing required tags for compliance\n"], [119, "  }\n"], [120, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [89, 120], "resource": "aws_instance.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.EC2PublicIP", "fixed_definition": null, "entity_tags": {"Environment": "testing", "Name": "demo-web-server"}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/public-policies/public-12", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_46", "bc_check_id": "BC_AWS_SECRETS_1", "check_name": "Ensure no hard-coded secrets exist in EC2 user data", "check_result": {"result": "PASSED", "evaluated_keys": ["user_data"]}, "code_block": [[89, "resource \"aws_instance\" \"web\" {\n"], [90, "  ami           = \"ami-0c94855ba95b798c7\"  # Amazon Linux 2 in us-west-2\n"], [91, "  instance_type = \"t3.micro\"\n"], [92, "  \n"], [93, "  # INSECURE: No encryption for EBS\n"], [94, "  root_block_device {\n"], [95, "    volume_type = \"gp3\"\n"], [96, "    volume_size = 20\n"], [97, "    encrypted   = false  # INSECURE!\n"], [98, "  }\n"], [99, "\n"], [100, "  vpc_security_group_ids = [aws_security_group.web.id]\n"], [101, "\n"], [102, "  # INSECURE: Hardcoded user data (could contain secrets)\n"], [103, "  user_data = base64encode(<<-EOF\n"], [104, "              #!/bin/bash\n"], [105, "              yum update -y\n"], [106, "              yum install -y httpd\n"], [107, "              systemctl start httpd\n"], [108, "              systemctl enable httpd\n"], [109, "              echo '<h1>Demo Web Server</h1>' > /var/www/html/index.html\n"], [110, "              # INSECURE: Hardcoded API key (for testing secret detection)\n"], [111, "              export API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [112, "              EOF\n"], [113, "  )\n"], [114, "\n"], [115, "  tags = {\n"], [116, "    Name        = \"demo-web-server\"\n"], [117, "    Environment = \"testing\"\n"], [118, "    # INSECURE: Missing required tags for compliance\n"], [119, "  }\n"], [120, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [89, 120], "resource": "aws_instance.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.EC2Credentials", "fixed_definition": null, "entity_tags": {"Environment": "testing", "Name": "demo-web-server"}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/secrets-policies/bc-aws-secrets-1", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_388", "bc_check_id": null, "check_name": "Ensure AWS Aurora PostgreSQL is not exposed to local file read vulnerability", "check_result": {"result": "PASSED", "evaluated_keys": []}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.UnpatchedAuroraPostgresDB", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": {}, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_211", "bc_check_id": "BC_AWS_GENERAL_118", "check_name": "Ensure RDS uses a modern CaCert", "check_result": {"result": "PASSED", "evaluated_keys": ["ca_cert_identifier"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.RDSCACertIsRecent", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-aws-rds-uses-a-modern-cacert", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_354", "bc_check_id": "BC_AWS_GENERAL_254", "check_name": "Ensure RDS Performance Insights are encrypted using KMS CMKs", "check_result": {"result": "PASSED", "evaluated_keys": ["performance_insights_kms_key_id"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.RDSInstancePerfInsightsEncryptionWithCMK", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-354", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_260", "bc_check_id": "BC_AWS_NETWORKING_67", "check_name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80", "check_result": {"result": "PASSED", "evaluated_keys": []}, "code_block": [[153, "resource \"aws_security_group\" \"database\" {\n"], [154, "  name        = \"database-security-group\" \n"], [155, "  description = \"Security group for database\"\n"], [156, "\n"], [157, "  # INSECURE: MySQL open to world\n"], [158, "  ingress {\n"], [159, "    description = \"MySQL\"\n"], [160, "    from_port   = 3306\n"], [161, "    to_port     = 3306\n"], [162, "    protocol    = \"tcp\"\n"], [163, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [164, "  }\n"], [165, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [153, 165], "resource": "aws_security_group.database", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedIngress80", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-aws-security-groups-do-not-allow-ingress-from-00000-to-port-80", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_25", "bc_check_id": "BC_AWS_NETWORKING_2", "check_name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389", "check_result": {"result": "PASSED", "evaluated_keys": []}, "code_block": [[153, "resource \"aws_security_group\" \"database\" {\n"], [154, "  name        = \"database-security-group\" \n"], [155, "  description = \"Security group for database\"\n"], [156, "\n"], [157, "  # INSECURE: MySQL open to world\n"], [158, "  ingress {\n"], [159, "    description = \"MySQL\"\n"], [160, "    from_port   = 3306\n"], [161, "    to_port     = 3306\n"], [162, "    protocol    = \"tcp\"\n"], [163, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [164, "  }\n"], [165, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [153, 165], "resource": "aws_security_group.database", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedIngress3389", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-2", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_24", "bc_check_id": "BC_AWS_NETWORKING_1", "check_name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22", "check_result": {"result": "PASSED", "evaluated_keys": []}, "code_block": [[153, "resource \"aws_security_group\" \"database\" {\n"], [154, "  name        = \"database-security-group\" \n"], [155, "  description = \"Security group for database\"\n"], [156, "\n"], [157, "  # INSECURE: MySQL open to world\n"], [158, "  ingress {\n"], [159, "    description = \"MySQL\"\n"], [160, "    from_port   = 3306\n"], [161, "    to_port     = 3306\n"], [162, "    protocol    = \"tcp\"\n"], [163, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [164, "  }\n"], [165, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [153, 165], "resource": "aws_security_group.database", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedIngress22", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-1-port-security", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_382", "bc_check_id": "BC_AWS_IAM_93", "check_name": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1", "check_result": {"result": "PASSED", "evaluated_keys": ["from_port", "to_port", "cidr_ipv4", "cidr_ipv6"]}, "code_block": [[153, "resource \"aws_security_group\" \"database\" {\n"], [154, "  name        = \"database-security-group\" \n"], [155, "  description = \"Security group for database\"\n"], [156, "\n"], [157, "  # INSECURE: MySQL open to world\n"], [158, "  ingress {\n"], [159, "    description = \"MySQL\"\n"], [160, "    from_port   = 3306\n"], [161, "    to_port     = 3306\n"], [162, "    protocol    = \"tcp\"\n"], [163, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [164, "  }\n"], [165, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [153, 165], "resource": "aws_security_group.database", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedEgressAny", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-382", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_23", "bc_check_id": "BC_AWS_NETWORKING_31", "check_name": "Ensure every security group and rule has a description", "check_result": {"result": "PASSED", "evaluated_keys": ["description"]}, "code_block": [[153, "resource \"aws_security_group\" \"database\" {\n"], [154, "  name        = \"database-security-group\" \n"], [155, "  description = \"Security group for database\"\n"], [156, "\n"], [157, "  # INSECURE: MySQL open to world\n"], [158, "  ingress {\n"], [159, "    description = \"MySQL\"\n"], [160, "    from_port   = 3306\n"], [161, "    to_port     = 3306\n"], [162, "    protocol    = \"tcp\"\n"], [163, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [164, "  }\n"], [165, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [153, 165], "resource": "aws_security_group.database", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupRuleDescription", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-31", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_277", "bc_check_id": "BC_AWS_NETWORKING_78", "check_name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port -1", "check_result": {"result": "PASSED", "evaluated_keys": []}, "code_block": [[153, "resource \"aws_security_group\" \"database\" {\n"], [154, "  name        = \"database-security-group\" \n"], [155, "  description = \"Security group for database\"\n"], [156, "\n"], [157, "  # INSECURE: MySQL open to world\n"], [158, "  ingress {\n"], [159, "    description = \"MySQL\"\n"], [160, "    from_port   = 3306\n"], [161, "    to_port     = 3306\n"], [162, "    protocol    = \"tcp\"\n"], [163, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [164, "  }\n"], [165, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [153, 165], "resource": "aws_security_group.database", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedIngressAny", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-aws-security-group-does-not-allow-all-traffic-on-all-ports", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_5", "bc_check_id": "BC_AWS_NETWORKING_51", "check_name": "Ensure that Security Groups are attached to another resource", "check_result": {"result": "PASSED", "entity": {"aws_security_group": {"web": {"__end_line__": 86, "__start_line__": 49, "description": ["Security group for web servers"], "egress": [{"cidr_blocks": [["0.0.0.0/0"]], "from_port": [0], "protocol": ["-1"], "to_port": [0]}], "ingress": [{"cidr_blocks": [["0.0.0.0/0"]], "description": ["SSH"], "from_port": [22], "protocol": ["tcp"], "to_port": [22]}, {"cidr_blocks": [["0.0.0.0/0"]], "description": ["HTTP"], "from_port": [80], "protocol": ["tcp"], "to_port": [80]}, {"cidr_blocks": [["0.0.0.0/0"]], "description": ["All ports"], "from_port": [8000], "protocol": ["tcp"], "to_port": [9000]}], "name": ["web-security-group"], "__address__": "aws_security_group.web", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["resource_type", "networking"]}, "code_block": [[49, "resource \"aws_security_group\" \"web\" {\n"], [50, "  name        = \"web-security-group\"\n"], [51, "  description = \"Security group for web servers\"\n"], [52, "\n"], [53, "  # INSECURE: SSH open to world\n"], [54, "  ingress {\n"], [55, "    description = \"SSH\"\n"], [56, "    from_port   = 22\n"], [57, "    to_port     = 22\n"], [58, "    protocol    = \"tcp\"\n"], [59, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [60, "  }\n"], [61, "\n"], [62, "  # INSECURE: HTTP open to world without HTTPS\n"], [63, "  ingress {\n"], [64, "    description = \"HTTP\"\n"], [65, "    from_port   = 80\n"], [66, "    to_port     = 80\n"], [67, "    protocol    = \"tcp\"\n"], [68, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [69, "  }\n"], [70, "\n"], [71, "  # INSECURE: Wide port range open\n"], [72, "  ingress {\n"], [73, "    description = \"All ports\"\n"], [74, "    from_port   = 8000\n"], [75, "    to_port     = 9000\n"], [76, "    protocol    = \"tcp\"\n"], [77, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [78, "  }\n"], [79, "\n"], [80, "  egress {\n"], [81, "    from_port   = 0\n"], [82, "    to_port     = 0\n"], [83, "    protocol    = \"-1\"\n"], [84, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [85, "  }\n"], [86, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [49, 86], "resource": "aws_security_group.web", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": {"code_block": [[89, "resource \"aws_instance\" \"web\" {\n"], [90, "  ami           = \"ami-0c94855ba95b798c7\"  # Amazon Linux 2 in us-west-2\n"], [91, "  instance_type = \"t3.micro\"\n"], [92, "  \n"], [93, "  # INSECURE: No encryption for EBS\n"], [94, "  root_block_device {\n"], [95, "    volume_type = \"gp3\"\n"], [96, "    volume_size = 20\n"], [97, "    encrypted   = false  # INSECURE!\n"], [98, "  }\n"], [99, "\n"], [100, "  vpc_security_group_ids = [aws_security_group.web.id]\n"], [101, "\n"], [102, "  # INSECURE: Hardcoded user data (could contain secrets)\n"], [103, "  user_data = base64encode(<<-EOF\n"], [104, "              #!/bin/bash\n"], [105, "              yum update -y\n"], [106, "              yum install -y httpd\n"], [107, "              systemctl start httpd\n"], [108, "              systemctl enable httpd\n"], [109, "              echo '<h1>Demo Web Server</h1>' > /var/www/html/index.html\n"], [110, "              # INSECURE: Hardcoded API key (for testing secret detection)\n"], [111, "              export API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [112, "              EOF\n"], [113, "  )\n"], [114, "\n"], [115, "  tags = {\n"], [116, "    Name        = \"demo-web-server\"\n"], [117, "    Environment = \"testing\"\n"], [118, "    # INSECURE: Missing required tags for compliance\n"], [119, "  }\n"], [120, "}\n"]], "file_path": "/terraform/main.tf", "file_line_range": [89, 120], "resource": "aws_instance.web", "entity_tags": {"Environment": "testing", "Name": "demo-web-server"}, "evaluations": null, "file_abs_path": "/tf/terraform/main.tf", "resource_address": null}, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-that-security-groups-are-attached-to-ec2-instances-or-elastic-network-interfaces-enis", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_5", "bc_check_id": "BC_AWS_NETWORKING_51", "check_name": "Ensure that Security Groups are attached to another resource", "check_result": {"result": "PASSED", "entity": {"aws_security_group": {"database": {"__end_line__": 165, "__start_line__": 153, "description": ["Security group for database"], "ingress": [{"cidr_blocks": [["0.0.0.0/0"]], "description": ["MySQL"], "from_port": [3306], "protocol": ["tcp"], "to_port": [3306]}], "name": ["database-security-group"], "__address__": "aws_security_group.database", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["resource_type", "networking"]}, "code_block": [[153, "resource \"aws_security_group\" \"database\" {\n"], [154, "  name        = \"database-security-group\" \n"], [155, "  description = \"Security group for database\"\n"], [156, "\n"], [157, "  # INSECURE: MySQL open to world\n"], [158, "  ingress {\n"], [159, "    description = \"MySQL\"\n"], [160, "    from_port   = 3306\n"], [161, "    to_port     = 3306\n"], [162, "    protocol    = \"tcp\"\n"], [163, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [164, "  }\n"], [165, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [153, 165], "resource": "aws_security_group.database", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": {"code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "entity_tags": {}, "evaluations": null, "file_abs_path": "/tf/terraform/main.tf", "resource_address": null}, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-that-security-groups-are-attached-to-ec2-instances-or-elastic-network-interfaces-enis", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_43", "bc_check_id": "BC_AWS_IAM_70", "check_name": "Ensure S3 Bucket does not allow access to all Authenticated users", "check_result": {"result": "PASSED", "entity": {"aws_s3_bucket_acl": {"demo_bucket": {"__end_line__": 38, "__start_line__": 31, "acl": ["public-read"], "bucket": ["aws_s3_bucket.demo_bucket.id"], "depends_on": [["aws_s3_bucket_ownership_controls.demo_bucket_acl_ownership"]], "__address__": "aws_s3_bucket_acl.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["access_control_policy/grant/*/grantee/uri"]}, "code_block": [[31, "resource \"aws_s3_bucket_acl\" \"demo_bucket\" {\n"], [32, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [33, "  \n"], [34, "  # INSECURE: Public read access\n"], [35, "  acl = \"public-read\"\n"], [36, "  \n"], [37, "  depends_on = [aws_s3_bucket_ownership_controls.demo_bucket_acl_ownership]\n"], [38, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [31, 38], "resource": "aws_s3_bucket_acl.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-s3-bucket-does-not-allow-access-to-all-authenticated-users", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_19", "bc_check_id": "BC_AWS_S3_14", "check_name": "Ensure all data stored in the S3 bucket is securely encrypted at rest", "check_result": {"result": "PASSED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["rule/apply_server_side_encryption_by_default/sse_algorithm", "resource_type", "server_side_encryption_configuration/rule/apply_server_side_encryption_by_default/sse_algorithm"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-14-data-encrypted-at-rest", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_69", "bc_check_id": "BC_AWS_NETWORKING_93", "check_name": "Ensure AWS RDS database instance configured with encryption in transit", "check_result": {"result": "PASSED", "entity": {"aws_db_instance": {"demo": {"__end_line__": 150, "__start_line__": 123, "allocated_storage": [20], "backup_retention_period": [0], "db_name": ["demo"], "engine": ["mysql"], "engine_version": ["8.0"], "identifier": ["demo-database"], "instance_class": ["db.t3.micro"], "max_allocated_storage": [100], "password": ["password123"], "publicly_accessible": [true], "skip_final_snapshot": [true], "storage_encrypted": [false], "username": ["admin"], "vpc_security_group_ids": [["aws_security_group.database.id"]], "__address__": "aws_db_instance.demo", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["parameter[?(@/name=='require_secure_transport')]/value", "parameter[?(@/name=='rds/force_ssl')]/value", "parameter[?(@/name=='db2comm')]/value", "resource_type", "family"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-2-69", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_57", "bc_check_id": "BC_AWS_S3_2", "check_name": "S3 Bucket has an ACL defined which allows public WRITE access.", "check_result": {"result": "PASSED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["access_control_policy", "access_control_policy/grant", "acl", "access_control_policy/grant/*/grantee/uri", "resource_type", "access_control_policy/grant/*/permission"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": {"code_block": [[31, "resource \"aws_s3_bucket_acl\" \"demo_bucket\" {\n"], [32, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [33, "  \n"], [34, "  # INSECURE: Public read access\n"], [35, "  acl = \"public-read\"\n"], [36, "  \n"], [37, "  depends_on = [aws_s3_bucket_ownership_controls.demo_bucket_acl_ownership]\n"], [38, "}\n"]], "file_path": "/terraform/main.tf", "file_line_range": [31, 38], "resource": "aws_s3_bucket_acl.demo_bucket", "entity_tags": {}, "evaluations": null, "file_abs_path": "/tf/terraform/main.tf", "resource_address": null}, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-2-acl-write-permissions-everyone", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}], "failed_checks": [{"check_id": "CKV_AWS_53", "bc_check_id": "BC_AWS_S3_19", "check_name": "Ensure S3 bucket has block public ACLS enabled", "check_result": {"result": "FAILED", "evaluated_keys": ["block_public_acls"]}, "code_block": [[21, "resource \"aws_s3_bucket_public_access_block\" \"demo_bucket\" {\n"], [22, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [23, "\n"], [24, "  # INSECURE: Allows public access\n"], [25, "  block_public_acls       = false\n"], [26, "  block_public_policy     = false\n"], [27, "  ignore_public_acls      = false\n"], [28, "  restrict_public_buckets = false\n"], [29, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [21, 29], "resource": "aws_s3_bucket_public_access_block.demo_bucket", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.S3BlockPublicACLs", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-19", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_55", "bc_check_id": "BC_AWS_S3_21", "check_name": "Ensure S3 bucket has ignore public ACLs enabled", "check_result": {"result": "FAILED", "evaluated_keys": ["ignore_public_acls"]}, "code_block": [[21, "resource \"aws_s3_bucket_public_access_block\" \"demo_bucket\" {\n"], [22, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [23, "\n"], [24, "  # INSECURE: Allows public access\n"], [25, "  block_public_acls       = false\n"], [26, "  block_public_policy     = false\n"], [27, "  ignore_public_acls      = false\n"], [28, "  restrict_public_buckets = false\n"], [29, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [21, 29], "resource": "aws_s3_bucket_public_access_block.demo_bucket", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.S3IgnorePublicACLs", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-21", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_56", "bc_check_id": "BC_AWS_S3_22", "check_name": "Ensure S3 bucket has 'restrict_public_buckets' enabled", "check_result": {"result": "FAILED", "evaluated_keys": ["restrict_public_buckets"]}, "code_block": [[21, "resource \"aws_s3_bucket_public_access_block\" \"demo_bucket\" {\n"], [22, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [23, "\n"], [24, "  # INSECURE: Allows public access\n"], [25, "  block_public_acls       = false\n"], [26, "  block_public_policy     = false\n"], [27, "  ignore_public_acls      = false\n"], [28, "  restrict_public_buckets = false\n"], [29, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [21, 29], "resource": "aws_s3_bucket_public_access_block.demo_bucket", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.S3RestrictPublicBuckets", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-22", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_54", "bc_check_id": "BC_AWS_S3_20", "check_name": "Ensure S3 bucket has block public policy enabled", "check_result": {"result": "FAILED", "evaluated_keys": ["block_public_policy"]}, "code_block": [[21, "resource \"aws_s3_bucket_public_access_block\" \"demo_bucket\" {\n"], [22, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [23, "\n"], [24, "  # INSECURE: Allows public access\n"], [25, "  block_public_acls       = false\n"], [26, "  block_public_policy     = false\n"], [27, "  ignore_public_acls      = false\n"], [28, "  restrict_public_buckets = false\n"], [29, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [21, 29], "resource": "aws_s3_bucket_public_access_block.demo_bucket", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.S3BlockPublicPolicy", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-20", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_260", "bc_check_id": "BC_AWS_NETWORKING_67", "check_name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80", "check_result": {"result": "FAILED", "evaluated_keys": ["ingress/[1]/from_port", "ingress/[1]/to_port", "ingress/[1]/cidr_blocks", "ingress/[1]/ipv6_cidr_blocks"]}, "code_block": [[49, "resource \"aws_security_group\" \"web\" {\n"], [50, "  name        = \"web-security-group\"\n"], [51, "  description = \"Security group for web servers\"\n"], [52, "\n"], [53, "  # INSECURE: SSH open to world\n"], [54, "  ingress {\n"], [55, "    description = \"SSH\"\n"], [56, "    from_port   = 22\n"], [57, "    to_port     = 22\n"], [58, "    protocol    = \"tcp\"\n"], [59, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [60, "  }\n"], [61, "\n"], [62, "  # INSECURE: HTTP open to world without HTTPS\n"], [63, "  ingress {\n"], [64, "    description = \"HTTP\"\n"], [65, "    from_port   = 80\n"], [66, "    to_port     = 80\n"], [67, "    protocol    = \"tcp\"\n"], [68, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [69, "  }\n"], [70, "\n"], [71, "  # INSECURE: Wide port range open\n"], [72, "  ingress {\n"], [73, "    description = \"All ports\"\n"], [74, "    from_port   = 8000\n"], [75, "    to_port     = 9000\n"], [76, "    protocol    = \"tcp\"\n"], [77, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [78, "  }\n"], [79, "\n"], [80, "  egress {\n"], [81, "    from_port   = 0\n"], [82, "    to_port     = 0\n"], [83, "    protocol    = \"-1\"\n"], [84, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [85, "  }\n"], [86, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [49, 86], "resource": "aws_security_group.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedIngress80", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-aws-security-groups-do-not-allow-ingress-from-00000-to-port-80", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_24", "bc_check_id": "BC_AWS_NETWORKING_1", "check_name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22", "check_result": {"result": "FAILED", "evaluated_keys": ["ingress/[0]/from_port", "ingress/[0]/to_port", "ingress/[0]/cidr_blocks", "ingress/[0]/ipv6_cidr_blocks"]}, "code_block": [[49, "resource \"aws_security_group\" \"web\" {\n"], [50, "  name        = \"web-security-group\"\n"], [51, "  description = \"Security group for web servers\"\n"], [52, "\n"], [53, "  # INSECURE: SSH open to world\n"], [54, "  ingress {\n"], [55, "    description = \"SSH\"\n"], [56, "    from_port   = 22\n"], [57, "    to_port     = 22\n"], [58, "    protocol    = \"tcp\"\n"], [59, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [60, "  }\n"], [61, "\n"], [62, "  # INSECURE: HTTP open to world without HTTPS\n"], [63, "  ingress {\n"], [64, "    description = \"HTTP\"\n"], [65, "    from_port   = 80\n"], [66, "    to_port     = 80\n"], [67, "    protocol    = \"tcp\"\n"], [68, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [69, "  }\n"], [70, "\n"], [71, "  # INSECURE: Wide port range open\n"], [72, "  ingress {\n"], [73, "    description = \"All ports\"\n"], [74, "    from_port   = 8000\n"], [75, "    to_port     = 9000\n"], [76, "    protocol    = \"tcp\"\n"], [77, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [78, "  }\n"], [79, "\n"], [80, "  egress {\n"], [81, "    from_port   = 0\n"], [82, "    to_port     = 0\n"], [83, "    protocol    = \"-1\"\n"], [84, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [85, "  }\n"], [86, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [49, 86], "resource": "aws_security_group.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedIngress22", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-1-port-security", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_382", "bc_check_id": "BC_AWS_IAM_93", "check_name": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1", "check_result": {"result": "FAILED", "evaluated_keys": ["egress/[0]/from_port", "egress/[0]/to_port", "egress/[0]/cidr_blocks", "egress/[0]/ipv6_cidr_blocks"]}, "code_block": [[49, "resource \"aws_security_group\" \"web\" {\n"], [50, "  name        = \"web-security-group\"\n"], [51, "  description = \"Security group for web servers\"\n"], [52, "\n"], [53, "  # INSECURE: SSH open to world\n"], [54, "  ingress {\n"], [55, "    description = \"SSH\"\n"], [56, "    from_port   = 22\n"], [57, "    to_port     = 22\n"], [58, "    protocol    = \"tcp\"\n"], [59, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [60, "  }\n"], [61, "\n"], [62, "  # INSECURE: HTTP open to world without HTTPS\n"], [63, "  ingress {\n"], [64, "    description = \"HTTP\"\n"], [65, "    from_port   = 80\n"], [66, "    to_port     = 80\n"], [67, "    protocol    = \"tcp\"\n"], [68, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [69, "  }\n"], [70, "\n"], [71, "  # INSECURE: Wide port range open\n"], [72, "  ingress {\n"], [73, "    description = \"All ports\"\n"], [74, "    from_port   = 8000\n"], [75, "    to_port     = 9000\n"], [76, "    protocol    = \"tcp\"\n"], [77, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [78, "  }\n"], [79, "\n"], [80, "  egress {\n"], [81, "    from_port   = 0\n"], [82, "    to_port     = 0\n"], [83, "    protocol    = \"-1\"\n"], [84, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [85, "  }\n"], [86, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [49, 86], "resource": "aws_security_group.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupUnrestrictedEgressAny", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-382", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_23", "bc_check_id": "BC_AWS_NETWORKING_31", "check_name": "Ensure every security group and rule has a description", "check_result": {"result": "FAILED", "evaluated_keys": ["description", "egress/[0]"]}, "code_block": [[49, "resource \"aws_security_group\" \"web\" {\n"], [50, "  name        = \"web-security-group\"\n"], [51, "  description = \"Security group for web servers\"\n"], [52, "\n"], [53, "  # INSECURE: SSH open to world\n"], [54, "  ingress {\n"], [55, "    description = \"SSH\"\n"], [56, "    from_port   = 22\n"], [57, "    to_port     = 22\n"], [58, "    protocol    = \"tcp\"\n"], [59, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [60, "  }\n"], [61, "\n"], [62, "  # INSECURE: HTTP open to world without HTTPS\n"], [63, "  ingress {\n"], [64, "    description = \"HTTP\"\n"], [65, "    from_port   = 80\n"], [66, "    to_port     = 80\n"], [67, "    protocol    = \"tcp\"\n"], [68, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [69, "  }\n"], [70, "\n"], [71, "  # INSECURE: Wide port range open\n"], [72, "  ingress {\n"], [73, "    description = \"All ports\"\n"], [74, "    from_port   = 8000\n"], [75, "    to_port     = 9000\n"], [76, "    protocol    = \"tcp\"\n"], [77, "    cidr_blocks = [\"0.0.0.0/0\"]  # INSECURE!\n"], [78, "  }\n"], [79, "\n"], [80, "  egress {\n"], [81, "    from_port   = 0\n"], [82, "    to_port     = 0\n"], [83, "    protocol    = \"-1\"\n"], [84, "    cidr_blocks = [\"0.0.0.0/0\"]\n"], [85, "  }\n"], [86, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [49, 86], "resource": "aws_security_group.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.SecurityGroupRuleDescription", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-31", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_126", "bc_check_id": "BC_AWS_LOGGING_26", "check_name": "Ensure that detailed monitoring is enabled for EC2 instances", "check_result": {"result": "FAILED", "evaluated_keys": ["monitoring"]}, "code_block": [[89, "resource \"aws_instance\" \"web\" {\n"], [90, "  ami           = \"ami-0c94855ba95b798c7\"  # Amazon Linux 2 in us-west-2\n"], [91, "  instance_type = \"t3.micro\"\n"], [92, "  \n"], [93, "  # INSECURE: No encryption for EBS\n"], [94, "  root_block_device {\n"], [95, "    volume_type = \"gp3\"\n"], [96, "    volume_size = 20\n"], [97, "    encrypted   = false  # INSECURE!\n"], [98, "  }\n"], [99, "\n"], [100, "  vpc_security_group_ids = [aws_security_group.web.id]\n"], [101, "\n"], [102, "  # INSECURE: Hardcoded user data (could contain secrets)\n"], [103, "  user_data = base64encode(<<-EOF\n"], [104, "              #!/bin/bash\n"], [105, "              yum update -y\n"], [106, "              yum install -y httpd\n"], [107, "              systemctl start httpd\n"], [108, "              systemctl enable httpd\n"], [109, "              echo '<h1>Demo Web Server</h1>' > /var/www/html/index.html\n"], [110, "              # INSECURE: Hardcoded API key (for testing secret detection)\n"], [111, "              export API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [112, "              EOF\n"], [113, "  )\n"], [114, "\n"], [115, "  tags = {\n"], [116, "    Name        = \"demo-web-server\"\n"], [117, "    Environment = \"testing\"\n"], [118, "    # INSECURE: Missing required tags for compliance\n"], [119, "  }\n"], [120, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [89, 120], "resource": "aws_instance.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.EC2DetailedMonitoringEnabled", "fixed_definition": null, "entity_tags": {"Environment": "testing", "Name": "demo-web-server"}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/ensure-that-detailed-monitoring-is-enabled-for-ec2-instances", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_79", "bc_check_id": "BC_AWS_GENERAL_31", "check_name": "Ensure Instance Metadata Service Version 1 is not enabled", "check_result": {"result": "FAILED", "evaluated_keys": ["metadata_options/[0]/http_tokens"]}, "code_block": [[89, "resource \"aws_instance\" \"web\" {\n"], [90, "  ami           = \"ami-0c94855ba95b798c7\"  # Amazon Linux 2 in us-west-2\n"], [91, "  instance_type = \"t3.micro\"\n"], [92, "  \n"], [93, "  # INSECURE: No encryption for EBS\n"], [94, "  root_block_device {\n"], [95, "    volume_type = \"gp3\"\n"], [96, "    volume_size = 20\n"], [97, "    encrypted   = false  # INSECURE!\n"], [98, "  }\n"], [99, "\n"], [100, "  vpc_security_group_ids = [aws_security_group.web.id]\n"], [101, "\n"], [102, "  # INSECURE: Hardcoded user data (could contain secrets)\n"], [103, "  user_data = base64encode(<<-EOF\n"], [104, "              #!/bin/bash\n"], [105, "              yum update -y\n"], [106, "              yum install -y httpd\n"], [107, "              systemctl start httpd\n"], [108, "              systemctl enable httpd\n"], [109, "              echo '<h1>Demo Web Server</h1>' > /var/www/html/index.html\n"], [110, "              # INSECURE: Hardcoded API key (for testing secret detection)\n"], [111, "              export API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [112, "              EOF\n"], [113, "  )\n"], [114, "\n"], [115, "  tags = {\n"], [116, "    Name        = \"demo-web-server\"\n"], [117, "    Environment = \"testing\"\n"], [118, "    # INSECURE: Missing required tags for compliance\n"], [119, "  }\n"], [120, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [89, 120], "resource": "aws_instance.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.IMDSv1Disabled", "fixed_definition": null, "entity_tags": {"Environment": "testing", "Name": "demo-web-server"}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-31", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_135", "bc_check_id": "BC_AWS_GENERAL_68", "check_name": "Ensure that EC2 is EBS optimized", "check_result": {"result": "FAILED", "evaluated_keys": ["ebs_optimized"]}, "code_block": [[89, "resource \"aws_instance\" \"web\" {\n"], [90, "  ami           = \"ami-0c94855ba95b798c7\"  # Amazon Linux 2 in us-west-2\n"], [91, "  instance_type = \"t3.micro\"\n"], [92, "  \n"], [93, "  # INSECURE: No encryption for EBS\n"], [94, "  root_block_device {\n"], [95, "    volume_type = \"gp3\"\n"], [96, "    volume_size = 20\n"], [97, "    encrypted   = false  # INSECURE!\n"], [98, "  }\n"], [99, "\n"], [100, "  vpc_security_group_ids = [aws_security_group.web.id]\n"], [101, "\n"], [102, "  # INSECURE: Hardcoded user data (could contain secrets)\n"], [103, "  user_data = base64encode(<<-EOF\n"], [104, "              #!/bin/bash\n"], [105, "              yum update -y\n"], [106, "              yum install -y httpd\n"], [107, "              systemctl start httpd\n"], [108, "              systemctl enable httpd\n"], [109, "              echo '<h1>Demo Web Server</h1>' > /var/www/html/index.html\n"], [110, "              # INSECURE: Hardcoded API key (for testing secret detection)\n"], [111, "              export API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [112, "              EOF\n"], [113, "  )\n"], [114, "\n"], [115, "  tags = {\n"], [116, "    Name        = \"demo-web-server\"\n"], [117, "    Environment = \"testing\"\n"], [118, "    # INSECURE: Missing required tags for compliance\n"], [119, "  }\n"], [120, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [89, 120], "resource": "aws_instance.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.EC2EBSOptimized", "fixed_definition": null, "entity_tags": {"Environment": "testing", "Name": "demo-web-server"}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-ec2-is-ebs-optimized", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_8", "bc_check_id": "BC_AWS_GENERAL_13", "check_name": "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted", "check_result": {"result": "FAILED", "evaluated_keys": ["root_block_device", "ebs_block_device"]}, "code_block": [[89, "resource \"aws_instance\" \"web\" {\n"], [90, "  ami           = \"ami-0c94855ba95b798c7\"  # Amazon Linux 2 in us-west-2\n"], [91, "  instance_type = \"t3.micro\"\n"], [92, "  \n"], [93, "  # INSECURE: No encryption for EBS\n"], [94, "  root_block_device {\n"], [95, "    volume_type = \"gp3\"\n"], [96, "    volume_size = 20\n"], [97, "    encrypted   = false  # INSECURE!\n"], [98, "  }\n"], [99, "\n"], [100, "  vpc_security_group_ids = [aws_security_group.web.id]\n"], [101, "\n"], [102, "  # INSECURE: Hardcoded user data (could contain secrets)\n"], [103, "  user_data = base64encode(<<-EOF\n"], [104, "              #!/bin/bash\n"], [105, "              yum update -y\n"], [106, "              yum install -y httpd\n"], [107, "              systemctl start httpd\n"], [108, "              systemctl enable httpd\n"], [109, "              echo '<h1>Demo Web Server</h1>' > /var/www/html/index.html\n"], [110, "              # INSECURE: Hardcoded API key (for testing secret detection)\n"], [111, "              export API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [112, "              EOF\n"], [113, "  )\n"], [114, "\n"], [115, "  tags = {\n"], [116, "    Name        = \"demo-web-server\"\n"], [117, "    Environment = \"testing\"\n"], [118, "    # INSECURE: Missing required tags for compliance\n"], [119, "  }\n"], [120, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [89, 120], "resource": "aws_instance.web", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.LaunchConfigurationEBSEncryption", "fixed_definition": null, "entity_tags": {"Environment": "testing", "Name": "demo-web-server"}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-13", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_129", "bc_check_id": "BC_AWS_IAM_60", "check_name": "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled", "check_result": {"result": "FAILED", "evaluated_keys": ["enabled_cloudwatch_logs_exports/[0]"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.DBInstanceLogging", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-that-respective-logs-of-amazon-relational-database-service-amazon-rds-are-enabled", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_293", "bc_check_id": "BC_AWS_GENERAL_208", "check_name": "Ensure that AWS database instances have deletion protection enabled", "check_result": {"result": "FAILED", "evaluated_keys": ["deletion_protection"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.RDSInstanceDeletionProtection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-293", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_161", "bc_check_id": "BC_AWS_IAM_65", "check_name": "Ensure RDS database has IAM authentication enabled", "check_result": {"result": "FAILED", "evaluated_keys": ["iam_database_authentication_enabled"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.RDSIAMAuthentication", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-rds-database-has-iam-authentication-enabled", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_133", "bc_check_id": "BC_AWS_GENERAL_46", "check_name": "Ensure that RDS instances has backup policy", "check_result": {"result": "FAILED", "evaluated_keys": ["backup_retention_period"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.DBInstanceBackupRetentionPeriod", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-rds-instances-have-backup-policy", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_17", "bc_check_id": "BC_AWS_PUBLIC_2", "check_name": "Ensure all data stored in RDS is not publicly accessible", "check_result": {"result": "FAILED", "evaluated_keys": ["publicly_accessible"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.RDSPubliclyAccessible", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/public-policies/public-2", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_226", "bc_check_id": "BC_AWS_GENERAL_121", "check_name": "Ensure DB instance gets all minor upgrades automatically", "check_result": {"result": "FAILED", "evaluated_keys": ["auto_minor_version_upgrade"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.DBInstanceMinorUpgrade", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-aws-db-instance-gets-all-minor-upgrades-automatically", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_118", "bc_check_id": "BC_AWS_LOGGING_28", "check_name": "Ensure that enhanced monitoring is enabled for Amazon RDS instances", "check_result": {"result": "FAILED", "evaluated_keys": ["monitoring_interval"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.RDSEnhancedMonitorEnabled", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/ensure-that-enhanced-monitoring-is-enabled-for-amazon-rds-instances", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_157", "bc_check_id": "BC_AWS_GENERAL_73", "check_name": "Ensure that RDS instances have Multi-AZ enabled", "check_result": {"result": "FAILED", "evaluated_keys": ["multi_az"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.RDSMultiAZEnabled", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-73", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_16", "bc_check_id": "BC_AWS_GENERAL_4", "check_name": "Ensure all data stored in the RDS is securely encrypted at rest", "check_result": {"result": "FAILED", "evaluated_keys": ["storage_encrypted"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.RDSEncryption", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-4", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_286", "bc_check_id": "BC_AWS_IAM_81", "check_name": "Ensure IAM policies does not allow privilege escalation", "check_result": {"result": "FAILED", "evaluated_keys": ["policy/Statement/[0]/Action"]}, "code_block": [[168, "resource \"aws_iam_policy\" \"demo_policy\" {\n"], [169, "  name        = \"demo-policy\"\n"], [170, "  description = \"Demo policy with excessive permissions\"\n"], [171, "\n"], [172, "  policy = jsonencode({\n"], [173, "    Version = \"2012-10-17\"\n"], [174, "    Statement = [\n"], [175, "      {\n"], [176, "        # INSECURE: Wildcard permissions\n"], [177, "        Effect = \"Allow\"\n"], [178, "        Action = \"*\"  # INSECURE: All actions allowed!\n"], [179, "        Resource = \"*\"  # INSECURE: All resources!\n"], [180, "      },\n"], [181, "    ]\n"], [182, "  })\n"], [183, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [168, 183], "resource": "aws_iam_policy.demo_policy", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.IAMPrivilegeEscalation", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-286", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_287", "bc_check_id": "BC_AWS_IAM_82", "check_name": "Ensure IAM policies does not allow credentials exposure", "check_result": {"result": "FAILED", "evaluated_keys": ["policy/Statement/[0]/Action"]}, "code_block": [[168, "resource \"aws_iam_policy\" \"demo_policy\" {\n"], [169, "  name        = \"demo-policy\"\n"], [170, "  description = \"Demo policy with excessive permissions\"\n"], [171, "\n"], [172, "  policy = jsonencode({\n"], [173, "    Version = \"2012-10-17\"\n"], [174, "    Statement = [\n"], [175, "      {\n"], [176, "        # INSECURE: Wildcard permissions\n"], [177, "        Effect = \"Allow\"\n"], [178, "        Action = \"*\"  # INSECURE: All actions allowed!\n"], [179, "        Resource = \"*\"  # INSECURE: All resources!\n"], [180, "      },\n"], [181, "    ]\n"], [182, "  })\n"], [183, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [168, 183], "resource": "aws_iam_policy.demo_policy", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.IAMCredentialsExposure", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-287", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_288", "bc_check_id": "BC_AWS_IAM_83", "check_name": "Ensure IAM policies does not allow data exfiltration", "check_result": {"result": "FAILED", "evaluated_keys": ["policy/Statement/[0]/Action"]}, "code_block": [[168, "resource \"aws_iam_policy\" \"demo_policy\" {\n"], [169, "  name        = \"demo-policy\"\n"], [170, "  description = \"Demo policy with excessive permissions\"\n"], [171, "\n"], [172, "  policy = jsonencode({\n"], [173, "    Version = \"2012-10-17\"\n"], [174, "    Statement = [\n"], [175, "      {\n"], [176, "        # INSECURE: Wildcard permissions\n"], [177, "        Effect = \"Allow\"\n"], [178, "        Action = \"*\"  # INSECURE: All actions allowed!\n"], [179, "        Resource = \"*\"  # INSECURE: All resources!\n"], [180, "      },\n"], [181, "    ]\n"], [182, "  })\n"], [183, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [168, 183], "resource": "aws_iam_policy.demo_policy", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.IAMDataExfiltration", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-288", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_289", "bc_check_id": "BC_AWS_IAM_84", "check_name": "Ensure IAM policies does not allow permissions management / resource exposure without constraints", "check_result": {"result": "FAILED", "evaluated_keys": ["policy/Statement/[0]/Action"]}, "code_block": [[168, "resource \"aws_iam_policy\" \"demo_policy\" {\n"], [169, "  name        = \"demo-policy\"\n"], [170, "  description = \"Demo policy with excessive permissions\"\n"], [171, "\n"], [172, "  policy = jsonencode({\n"], [173, "    Version = \"2012-10-17\"\n"], [174, "    Statement = [\n"], [175, "      {\n"], [176, "        # INSECURE: Wildcard permissions\n"], [177, "        Effect = \"Allow\"\n"], [178, "        Action = \"*\"  # INSECURE: All actions allowed!\n"], [179, "        Resource = \"*\"  # INSECURE: All resources!\n"], [180, "      },\n"], [181, "    ]\n"], [182, "  })\n"], [183, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [168, 183], "resource": "aws_iam_policy.demo_policy", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.IAMPermissionsManagement", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-289", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_355", "bc_check_id": "BC_AWS_IAM_88", "check_name": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions", "check_result": {"result": "FAILED", "evaluated_keys": ["policy/Statement/[0]/Action"]}, "code_block": [[168, "resource \"aws_iam_policy\" \"demo_policy\" {\n"], [169, "  name        = \"demo-policy\"\n"], [170, "  description = \"Demo policy with excessive permissions\"\n"], [171, "\n"], [172, "  policy = jsonencode({\n"], [173, "    Version = \"2012-10-17\"\n"], [174, "    Statement = [\n"], [175, "      {\n"], [176, "        # INSECURE: Wildcard permissions\n"], [177, "        Effect = \"Allow\"\n"], [178, "        Action = \"*\"  # INSECURE: All actions allowed!\n"], [179, "        Resource = \"*\"  # INSECURE: All resources!\n"], [180, "      },\n"], [181, "    ]\n"], [182, "  })\n"], [183, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [168, 183], "resource": "aws_iam_policy.demo_policy", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.IAMStarResourcePolicyDocument", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-355", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_290", "bc_check_id": "BC_AWS_IAM_85", "check_name": "Ensure IAM policies does not allow write access without constraints", "check_result": {"result": "FAILED", "evaluated_keys": ["policy/Statement/[0]/Action"]}, "code_block": [[168, "resource \"aws_iam_policy\" \"demo_policy\" {\n"], [169, "  name        = \"demo-policy\"\n"], [170, "  description = \"Demo policy with excessive permissions\"\n"], [171, "\n"], [172, "  policy = jsonencode({\n"], [173, "    Version = \"2012-10-17\"\n"], [174, "    Statement = [\n"], [175, "      {\n"], [176, "        # INSECURE: Wildcard permissions\n"], [177, "        Effect = \"Allow\"\n"], [178, "        Action = \"*\"  # INSECURE: All actions allowed!\n"], [179, "        Resource = \"*\"  # INSECURE: All resources!\n"], [180, "      },\n"], [181, "    ]\n"], [182, "  })\n"], [183, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [168, 183], "resource": "aws_iam_policy.demo_policy", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.IAMWriteAccess", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-290", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_63", "bc_check_id": "BC_AWS_IAM_48", "check_name": "Ensure no IAM policies documents allow \"*\" as a statement's actions", "check_result": {"result": "FAILED", "evaluated_keys": ["policy", "inline_policy"]}, "code_block": [[168, "resource \"aws_iam_policy\" \"demo_policy\" {\n"], [169, "  name        = \"demo-policy\"\n"], [170, "  description = \"Demo policy with excessive permissions\"\n"], [171, "\n"], [172, "  policy = jsonencode({\n"], [173, "    Version = \"2012-10-17\"\n"], [174, "    Statement = [\n"], [175, "      {\n"], [176, "        # INSECURE: Wildcard permissions\n"], [177, "        Effect = \"Allow\"\n"], [178, "        Action = \"*\"  # INSECURE: All actions allowed!\n"], [179, "        Resource = \"*\"  # INSECURE: All resources!\n"], [180, "      },\n"], [181, "    ]\n"], [182, "  })\n"], [183, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [168, 183], "resource": "aws_iam_policy.demo_policy", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.IAMStarActionPolicyDocument", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/iam-48", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_62", "bc_check_id": "BC_AWS_IAM_47", "check_name": "Ensure IAM policies that allow full \"*-*\" administrative privileges are not created", "check_result": {"result": "FAILED", "evaluated_keys": ["policy", "inline_policy"]}, "code_block": [[168, "resource \"aws_iam_policy\" \"demo_policy\" {\n"], [169, "  name        = \"demo-policy\"\n"], [170, "  description = \"Demo policy with excessive permissions\"\n"], [171, "\n"], [172, "  policy = jsonencode({\n"], [173, "    Version = \"2012-10-17\"\n"], [174, "    Statement = [\n"], [175, "      {\n"], [176, "        # INSECURE: Wildcard permissions\n"], [177, "        Effect = \"Allow\"\n"], [178, "        Action = \"*\"  # INSECURE: All actions allowed!\n"], [179, "        Resource = \"*\"  # INSECURE: All resources!\n"], [180, "      },\n"], [181, "    ]\n"], [182, "  })\n"], [183, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [168, 183], "resource": "aws_iam_policy.demo_policy", "evaluations": null, "check_class": "checkov.terraform.checks.resource.aws.IAMAdminPolicyDocument", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-iam-45", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_61", "bc_check_id": "BC_AWS_LOGGING_35", "check_name": "Ensure that an S3 bucket has a lifecycle configuration", "check_result": {"result": "FAILED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["lifecycle_rule", "resource_type"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-61", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_144", "bc_check_id": "BC_AWS_GENERAL_72", "check_name": "Ensure that S3 bucket has cross-region replication enabled", "check_result": {"result": "FAILED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["replication_configuration/rules/*/status", "resource_type", "rule/*/status"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-bucket-has-cross-region-replication-enabled", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_18", "bc_check_id": "BC_AWS_S3_13", "check_name": "Ensure the S3 bucket has access logging enabled", "check_result": {"result": "FAILED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["resource_type", "logging"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-13-enable-logging", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_145", "bc_check_id": "BC_AWS_GENERAL_56", "check_name": "Ensure that S3 buckets are encrypted with KMS by default", "check_result": {"result": "FAILED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["rule/apply_server_side_encryption_by_default/sse_algorithm", "resource_type", "server_side_encryption_configuration/rule/apply_server_side_encryption_by_default/sse_algorithm"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-buckets-are-encrypted-with-kms-by-default", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_60", "bc_check_id": "BC_AWS_GENERAL_195", "check_name": "Ensure RDS instance with copy tags to snapshots is enabled", "check_result": {"result": "FAILED", "entity": {"aws_db_instance": {"demo": {"__end_line__": 150, "__start_line__": 123, "allocated_storage": [20], "backup_retention_period": [0], "db_name": ["demo"], "engine": ["mysql"], "engine_version": ["8.0"], "identifier": ["demo-database"], "instance_class": ["db.t3.micro"], "max_allocated_storage": [100], "password": ["password123"], "publicly_accessible": [true], "skip_final_snapshot": [true], "storage_encrypted": [false], "username": ["admin"], "vpc_security_group_ids": [["aws_security_group.database.id"]], "__address__": "aws_db_instance.demo", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["copy_tags_to_snapshot", "engine"]}, "code_block": [[123, "resource \"aws_db_instance\" \"demo\" {\n"], [124, "  identifier = \"demo-database\"\n"], [125, "  \n"], [126, "  engine         = \"mysql\"\n"], [127, "  engine_version = \"8.0\"\n"], [128, "  instance_class = \"db.t3.micro\"\n"], [129, "  \n"], [130, "  allocated_storage     = 20\n"], [131, "  max_allocated_storage = 100\n"], [132, "  \n"], [133, "  db_name  = \"demo\"\n"], [134, "  username = \"admin\"\n"], [135, "  password = \"password123\"  # INSECURE: Hardcoded password!\n"], [136, "  \n"], [137, "  # INSECURE: Not encrypted\n"], [138, "  storage_encrypted = false\n"], [139, "  \n"], [140, "  # INSECURE: Public access\n"], [141, "  publicly_accessible = true\n"], [142, "  \n"], [143, "  # INSECURE: No backup retention\n"], [144, "  backup_retention_period = 0\n"], [145, "  \n"], [146, "  # INSECURE: Skip final snapshot\n"], [147, "  skip_final_snapshot = true\n"], [148, "  \n"], [149, "  vpc_security_group_ids = [aws_security_group.database.id]\n"], [150, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [123, 150], "resource": "aws_db_instance.demo", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-2-60", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_41", "bc_check_id": "BC_AWS_IAM_69", "check_name": "Ensure an IAM role is attached to EC2 instance", "check_result": {"result": "FAILED", "entity": {"aws_instance": {"web": {"__end_line__": 120, "__start_line__": 89, "ami": ["ami-0c94855ba95b798c7"], "instance_type": ["t3.micro"], "root_block_device": [{"encrypted": [false], "volume_size": [20], "volume_type": ["gp3"]}], "tags": [{"Environment": "testing", "Name": "demo-web-server"}], "user_data": ["base64encode("], "vpc_security_group_ids": [["aws_security_group.web.id"]], "__address__": "aws_instance.web", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["iam_instance_profile"]}, "code_block": [[89, "resource \"aws_instance\" \"web\" {\n"], [90, "  ami           = \"ami-0c94855ba95b798c7\"  # Amazon Linux 2 in us-west-2\n"], [91, "  instance_type = \"t3.micro\"\n"], [92, "  \n"], [93, "  # INSECURE: No encryption for EBS\n"], [94, "  root_block_device {\n"], [95, "    volume_type = \"gp3\"\n"], [96, "    volume_size = 20\n"], [97, "    encrypted   = false  # INSECURE!\n"], [98, "  }\n"], [99, "\n"], [100, "  vpc_security_group_ids = [aws_security_group.web.id]\n"], [101, "\n"], [102, "  # INSECURE: Hardcoded user data (could contain secrets)\n"], [103, "  user_data = base64encode(<<-EOF\n"], [104, "              #!/bin/bash\n"], [105, "              yum update -y\n"], [106, "              yum install -y httpd\n"], [107, "              systemctl start httpd\n"], [108, "              systemctl enable httpd\n"], [109, "              echo '<h1>Demo Web Server</h1>' > /var/www/html/index.html\n"], [110, "              # INSECURE: Hardcoded API key (for testing secret detection)\n"], [111, "              export API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [112, "              EOF\n"], [113, "  )\n"], [114, "\n"], [115, "  tags = {\n"], [116, "    Name        = \"demo-web-server\"\n"], [117, "    Environment = \"testing\"\n"], [118, "    # INSECURE: Missing required tags for compliance\n"], [119, "  }\n"], [120, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [89, 120], "resource": "aws_instance.web", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {"Environment": "testing", "Name": "demo-web-server"}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-an-iam-role-is-attached-to-ec2-instance", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_6", "bc_check_id": "BC_AWS_NETWORKING_52", "check_name": "Ensure that S3 bucket has a Public Access block", "check_result": {"result": "FAILED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["resource_type", "block_public_acls", "block_public_policy"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": {"code_block": [[21, "resource \"aws_s3_bucket_public_access_block\" \"demo_bucket\" {\n"], [22, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [23, "\n"], [24, "  # INSECURE: Allows public access\n"], [25, "  block_public_acls       = false\n"], [26, "  block_public_policy     = false\n"], [27, "  ignore_public_acls      = false\n"], [28, "  restrict_public_buckets = false\n"], [29, "}\n"]], "file_path": "/terraform/main.tf", "file_line_range": [21, 29], "resource": "aws_s3_bucket_public_access_block.demo_bucket", "entity_tags": {}, "evaluations": null, "file_abs_path": "/tf/terraform/main.tf", "resource_address": null}, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/s3-bucket-should-have-public-access-blocks-defaults-to-false-if-the-public-access-block-is-not-attached", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_21", "bc_check_id": "BC_AWS_S3_16", "check_name": "Ensure all data stored in the S3 bucket have versioning enabled", "check_result": {"result": "FAILED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["resource_type", "versioning/enabled", "versioning_configuration/status"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-16-enable-versioning", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV_AWS_20", "bc_check_id": "BC_AWS_S3_1", "check_name": "S3 Bucket has an ACL defined which allows public READ access.", "check_result": {"result": "FAILED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["access_control_policy", "access_control_policy/grant", "acl", "access_control_policy/grant/*/grantee/uri", "resource_type"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": {"code_block": [[31, "resource \"aws_s3_bucket_acl\" \"demo_bucket\" {\n"], [32, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [33, "  \n"], [34, "  # INSECURE: Public read access\n"], [35, "  acl = \"public-read\"\n"], [36, "  \n"], [37, "  depends_on = [aws_s3_bucket_ownership_controls.demo_bucket_acl_ownership]\n"], [38, "}\n"]], "file_path": "/terraform/main.tf", "file_line_range": [31, 38], "resource": "aws_s3_bucket_acl.demo_bucket", "entity_tags": {}, "evaluations": null, "file_abs_path": "/tf/terraform/main.tf", "resource_address": null}, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-1-acl-read-permissions-everyone", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_62", "bc_check_id": "BC_AWS_LOGGING_36", "check_name": "Ensure S3 buckets should have event notifications enabled", "check_result": {"result": "FAILED", "entity": {"aws_s3_bucket": {"demo_bucket": {"__end_line__": 19, "__start_line__": 17, "bucket": ["demo-security-test-bucket-${random_string.suffix.result}"], "__address__": "aws_s3_bucket.demo_bucket", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["resource_type"]}, "code_block": [[17, "resource \"aws_s3_bucket\" \"demo_bucket\" {\n"], [18, "  bucket = \"demo-security-test-bucket-${random_string.suffix.result}\"\n"], [19, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [17, 19], "resource": "aws_s3_bucket.demo_bucket", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-62", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_65", "bc_check_id": "BC_AWS_GENERAL_187", "check_name": "Ensure access control lists for S3 buckets are disabled", "check_result": {"result": "FAILED", "entity": {"aws_s3_bucket_ownership_controls": {"demo_bucket_acl_ownership": {"__end_line__": 46, "__start_line__": 40, "bucket": ["aws_s3_bucket.demo_bucket.id"], "rule": [{"object_ownership": ["BucketOwnerPreferred"]}], "__address__": "aws_s3_bucket_ownership_controls.demo_bucket_acl_ownership", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["rule/object_ownership"]}, "code_block": [[40, "resource \"aws_s3_bucket_ownership_controls\" \"demo_bucket_acl_ownership\" {\n"], [41, "  bucket = aws_s3_bucket.demo_bucket.id\n"], [42, "  \n"], [43, "  rule {\n"], [44, "    object_ownership = \"BucketOwnerPreferred\"\n"], [45, "  }\n"], [46, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [40, 46], "resource": "aws_s3_bucket_ownership_controls.demo_bucket_acl_ownership", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-112", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}, {"check_id": "CKV2_AWS_40", "bc_check_id": "BC_AWS_IAM_73", "check_name": "Ensure AWS IAM policy does not allow full IAM privileges", "check_result": {"result": "FAILED", "entity": {"aws_iam_policy": {"demo_policy": {"__end_line__": 183, "__start_line__": 168, "description": ["Demo policy with excessive permissions"], "name": ["demo-policy"], "policy": [{"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": "*", "Resource": "*"}]}], "__address__": "aws_iam_policy.demo_policy", "__provider_address__": "aws.default"}}}, "evaluated_keys": ["statement[?(@/effect == Allow)]/actions[*]", "inline_policy/Statement[?(@/Effect == Allow)]/Action[*]", "policy/Statement[?(@/Effect == Allow)]/Action[*]"]}, "code_block": [[168, "resource \"aws_iam_policy\" \"demo_policy\" {\n"], [169, "  name        = \"demo-policy\"\n"], [170, "  description = \"Demo policy with excessive permissions\"\n"], [171, "\n"], [172, "  policy = jsonencode({\n"], [173, "    Version = \"2012-10-17\"\n"], [174, "    Statement = [\n"], [175, "      {\n"], [176, "        # INSECURE: Wildcard permissions\n"], [177, "        Effect = \"Allow\"\n"], [178, "        Action = \"*\"  # INSECURE: All actions allowed!\n"], [179, "        Resource = \"*\"  # INSECURE: All resources!\n"], [180, "      },\n"], [181, "    ]\n"], [182, "  })\n"], [183, "}\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [168, 183], "resource": "aws_iam_policy.demo_policy", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": {}, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-2-40", "details": [], "check_len": null, "definition_context_file_path": "/tf/terraform/main.tf"}], "skipped_checks": [], "parsing_errors": []}, "summary": {"passed": 22, "failed": 41, "skipped": 0, "parsing_errors": 0, "resource_count": 10, "checkov_version": "3.2.467"}, "url": "Add an api key '--bc-api-key <api-key>' to see more detailed insights via https://bridgecrew.cloud"}, {"check_type": "dockerfile", "results": {"passed_checks": [{"check_id": "CKV_DOCKER_11", "bc_check_id": "BC_DKR_GENERAL_9", "check_name": "Ensure From Alias are unique for multistage builds.", "check_result": {"result": "PASSED", "results_configuration": null}, "code_block": [[1, "# INSECURE Dockerfile for Testing Security Scanners\n"], [2, "\n"], [3, "# INSECURE: Using latest tag (not pinned)\n"], [4, "FROM node:latest\n"], [5, "\n"], [6, "# INSECURE: Running as root (no USER instruction)\n"], [7, "\n"], [8, "# INSECURE: Hardcoded secrets in environment\n"], [9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [10, "ENV DATABASE_PASSWORD=supersecret123\n"], [11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"], [12, "\n"], [13, "WORKDIR /app\n"], [14, "\n"], [15, "# INSECURE: Installing unnecessary packages that increase attack surface\n"], [16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"], [26, "\n"], [27, "# INSECURE: Copying everything (no .dockerignore)\n"], [28, "COPY . .\n"], [29, "\n"], [30, "# INSECURE: Installing packages with npm (not npm ci)\n"], [31, "RUN npm install\n"], [32, "\n"], [33, "# INSECURE: Installing packages as root with elevated privileges\n"], [34, "RUN npm install -g nodemon pm2\n"], [35, "\n"], [36, "# INSECURE: Exposing unnecessary ports\n"], [37, "EXPOSE 3000 8080 9000 22\n"], [38, "\n"], [39, "# INSECURE: Running application as root\n"], [40, "CMD [\"node\", \"server.js\"]"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [1, 40], "resource": "/docker/Dockerfile.", "evaluations": null, "check_class": "checkov.dockerfile.checks.AliasIsUnique", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-from-alias-is-unique-for-multistage-builds", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV_DOCKER_9", "bc_check_id": "BC_DKR_NETWORKING_1", "check_name": "Ensure that APT isn't used", "check_result": {"result": "PASSED", "results_configuration": null}, "code_block": [[1, "# INSECURE Dockerfile for Testing Security Scanners\n"], [2, "\n"], [3, "# INSECURE: Using latest tag (not pinned)\n"], [4, "FROM node:latest\n"], [5, "\n"], [6, "# INSECURE: Running as root (no USER instruction)\n"], [7, "\n"], [8, "# INSECURE: Hardcoded secrets in environment\n"], [9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [10, "ENV DATABASE_PASSWORD=supersecret123\n"], [11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"], [12, "\n"], [13, "WORKDIR /app\n"], [14, "\n"], [15, "# INSECURE: Installing unnecessary packages that increase attack surface\n"], [16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"], [26, "\n"], [27, "# INSECURE: Copying everything (no .dockerignore)\n"], [28, "COPY . .\n"], [29, "\n"], [30, "# INSECURE: Installing packages with npm (not npm ci)\n"], [31, "RUN npm install\n"], [32, "\n"], [33, "# INSECURE: Installing packages as root with elevated privileges\n"], [34, "RUN npm install -g nodemon pm2\n"], [35, "\n"], [36, "# INSECURE: Exposing unnecessary ports\n"], [37, "EXPOSE 3000 8080 9000 22\n"], [38, "\n"], [39, "# INSECURE: Running application as root\n"], [40, "CMD [\"node\", \"server.js\"]"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [1, 40], "resource": "/docker/Dockerfile.", "evaluations": null, "check_class": "checkov.dockerfile.checks.RunUsingAPT", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apt-is-not-used", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV_DOCKER_5", "bc_check_id": "BC_DKR_4", "check_name": "Ensure update instructions are not use alone in the Dockerfile", "check_result": {"result": "PASSED", "results_configuration": null}, "code_block": [[1, "# INSECURE Dockerfile for Testing Security Scanners\n"], [2, "\n"], [3, "# INSECURE: Using latest tag (not pinned)\n"], [4, "FROM node:latest\n"], [5, "\n"], [6, "# INSECURE: Running as root (no USER instruction)\n"], [7, "\n"], [8, "# INSECURE: Hardcoded secrets in environment\n"], [9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [10, "ENV DATABASE_PASSWORD=supersecret123\n"], [11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"], [12, "\n"], [13, "WORKDIR /app\n"], [14, "\n"], [15, "# INSECURE: Installing unnecessary packages that increase attack surface\n"], [16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"], [26, "\n"], [27, "# INSECURE: Copying everything (no .dockerignore)\n"], [28, "COPY . .\n"], [29, "\n"], [30, "# INSECURE: Installing packages with npm (not npm ci)\n"], [31, "RUN npm install\n"], [32, "\n"], [33, "# INSECURE: Installing packages as root with elevated privileges\n"], [34, "RUN npm install -g nodemon pm2\n"], [35, "\n"], [36, "# INSECURE: Exposing unnecessary ports\n"], [37, "EXPOSE 3000 8080 9000 22\n"], [38, "\n"], [39, "# INSECURE: Running application as root\n"], [40, "CMD [\"node\", \"server.js\"]"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [1, 40], "resource": "/docker/Dockerfile.", "evaluations": null, "check_class": "checkov.dockerfile.checks.UpdateNotAlone", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-update-instructions-are-not-used-alone-in-the-dockerfile", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV_DOCKER_10", "bc_check_id": "BC_DKR_GENERAL_10", "check_name": "Ensure that WORKDIR values are absolute paths", "check_result": {"result": "PASSED", "results_configuration": null}, "code_block": [[1, "# INSECURE Dockerfile for Testing Security Scanners\n"], [2, "\n"], [3, "# INSECURE: Using latest tag (not pinned)\n"], [4, "FROM node:latest\n"], [5, "\n"], [6, "# INSECURE: Running as root (no USER instruction)\n"], [7, "\n"], [8, "# INSECURE: Hardcoded secrets in environment\n"], [9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [10, "ENV DATABASE_PASSWORD=supersecret123\n"], [11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"], [12, "\n"], [13, "WORKDIR /app\n"], [14, "\n"], [15, "# INSECURE: Installing unnecessary packages that increase attack surface\n"], [16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"], [26, "\n"], [27, "# INSECURE: Copying everything (no .dockerignore)\n"], [28, "COPY . .\n"], [29, "\n"], [30, "# INSECURE: Installing packages with npm (not npm ci)\n"], [31, "RUN npm install\n"], [32, "\n"], [33, "# INSECURE: Installing packages as root with elevated privileges\n"], [34, "RUN npm install -g nodemon pm2\n"], [35, "\n"], [36, "# INSECURE: Exposing unnecessary ports\n"], [37, "EXPOSE 3000 8080 9000 22\n"], [38, "\n"], [39, "# INSECURE: Running application as root\n"], [40, "CMD [\"node\", \"server.js\"]"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [1, 40], "resource": "/docker/Dockerfile.", "evaluations": null, "check_class": "checkov.dockerfile.checks.WorkdirIsAbsolute", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-workdir-values-are-absolute-paths", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_17", "bc_check_id": null, "check_name": "Ensure that 'chpasswd' is not used to set or remove passwords", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/bc-docker-2-17", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_17", "bc_check_id": null, "check_name": "Ensure that 'chpasswd' is not used to set or remove passwords", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/bc-docker-2-17", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_17", "bc_check_id": null, "check_name": "Ensure that 'chpasswd' is not used to set or remove passwords", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/bc-docker-2-17", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_1", "bc_check_id": null, "check_name": "Ensure that sudo isn't used", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-dont-use-sudo", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_1", "bc_check_id": null, "check_name": "Ensure that sudo isn't used", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-dont-use-sudo", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_6", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the NODE_TLS_REJECT_UNAUTHORIZED environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8, "resource_type": "ENV", "hash": "b945986be4b966796f2e07b52e6e11afd8e36acecfa4cf283ba6f859393814c5"}, "evaluated_keys": ["value"]}, "code_block": [[9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [9, 9], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-node-tls-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_6", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the NODE_TLS_REJECT_UNAUTHORIZED environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9, "resource_type": "ENV", "hash": "45db84a72b1a90970da574ae35670c496d893686cb92ff20c77d5ad9c2d8502b"}, "evaluated_keys": ["value"]}, "code_block": [[10, "ENV DATABASE_PASSWORD=supersecret123\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [10, 10], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-node-tls-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_6", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the NODE_TLS_REJECT_UNAUTHORIZED environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10, "resource_type": "ENV", "hash": "b0d096d21598a110f33ef0b95f9327791c338ce61f4caee08be9b968b997480e"}, "evaluated_keys": ["value"]}, "code_block": [[11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [11, 11], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-node-tls-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_6", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the NODE_TLS_REJECT_UNAUTHORIZED environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-node-tls-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_6", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the NODE_TLS_REJECT_UNAUTHORIZED environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-node-tls-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_6", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the NODE_TLS_REJECT_UNAUTHORIZED environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-node-tls-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_14", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for git by setting the environment variable 'GIT_SSL_NO_VERIFY' to any value", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8, "resource_type": "ENV", "hash": "b945986be4b966796f2e07b52e6e11afd8e36acecfa4cf283ba6f859393814c5"}, "evaluated_keys": ["value"]}, "code_block": [[9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [9, 9], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-git-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_14", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for git by setting the environment variable 'GIT_SSL_NO_VERIFY' to any value", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9, "resource_type": "ENV", "hash": "45db84a72b1a90970da574ae35670c496d893686cb92ff20c77d5ad9c2d8502b"}, "evaluated_keys": ["value"]}, "code_block": [[10, "ENV DATABASE_PASSWORD=supersecret123\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [10, 10], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-git-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_14", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for git by setting the environment variable 'GIT_SSL_NO_VERIFY' to any value", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10, "resource_type": "ENV", "hash": "b0d096d21598a110f33ef0b95f9327791c338ce61f4caee08be9b968b997480e"}, "evaluated_keys": ["value"]}, "code_block": [[11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [11, 11], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-git-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_14", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for git by setting the environment variable 'GIT_SSL_NO_VERIFY' to any value", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-git-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_14", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for git by setting the environment variable 'GIT_SSL_NO_VERIFY' to any value", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-git-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_14", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for git by setting the environment variable 'GIT_SSL_NO_VERIFY' to any value", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-git-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_5", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the PYTHONHTTPSVERIFY environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8, "resource_type": "ENV", "hash": "b945986be4b966796f2e07b52e6e11afd8e36acecfa4cf283ba6f859393814c5"}, "evaluated_keys": ["value"]}, "code_block": [[9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [9, 9], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-PYTHONHTTPSVERIFY-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_5", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the PYTHONHTTPSVERIFY environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9, "resource_type": "ENV", "hash": "45db84a72b1a90970da574ae35670c496d893686cb92ff20c77d5ad9c2d8502b"}, "evaluated_keys": ["value"]}, "code_block": [[10, "ENV DATABASE_PASSWORD=supersecret123\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [10, 10], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-PYTHONHTTPSVERIFY-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_5", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the PYTHONHTTPSVERIFY environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10, "resource_type": "ENV", "hash": "b0d096d21598a110f33ef0b95f9327791c338ce61f4caee08be9b968b997480e"}, "evaluated_keys": ["value"]}, "code_block": [[11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [11, 11], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-PYTHONHTTPSVERIFY-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_5", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the PYTHONHTTPSVERIFY environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-PYTHONHTTPSVERIFY-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_5", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the PYTHONHTTPSVERIFY environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-PYTHONHTTPSVERIFY-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_5", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the PYTHONHTTPSVERIFY environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-PYTHONHTTPSVERIFY-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_12", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for npm via the 'NPM_CONFIG_STRICT_SSL' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8, "resource_type": "ENV", "hash": "b945986be4b966796f2e07b52e6e11afd8e36acecfa4cf283ba6f859393814c5"}, "evaluated_keys": ["value"]}, "code_block": [[9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [9, 9], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-npm-strict-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_12", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for npm via the 'NPM_CONFIG_STRICT_SSL' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9, "resource_type": "ENV", "hash": "45db84a72b1a90970da574ae35670c496d893686cb92ff20c77d5ad9c2d8502b"}, "evaluated_keys": ["value"]}, "code_block": [[10, "ENV DATABASE_PASSWORD=supersecret123\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [10, 10], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-npm-strict-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_12", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for npm via the 'NPM_CONFIG_STRICT_SSL' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10, "resource_type": "ENV", "hash": "b0d096d21598a110f33ef0b95f9327791c338ce61f4caee08be9b968b997480e"}, "evaluated_keys": ["value"]}, "code_block": [[11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [11, 11], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-npm-strict-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_12", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for npm via the 'NPM_CONFIG_STRICT_SSL' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-npm-strict-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_12", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for npm via the 'NPM_CONFIG_STRICT_SSL' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-npm-strict-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_12", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for npm via the 'NPM_CONFIG_STRICT_SSL' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-npm-strict-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_16", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with pip via the 'PIP_TRUSTED_HOST' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n", "value": "API_KEY=sk-1234567890abcdef1234567890abcdef", "__startline__": 8, "__endline__": 8, "resource_type": "ENV", "hash": "b945986be4b966796f2e07b52e6e11afd8e36acecfa4cf283ba6f859393814c5"}, "evaluated_keys": ["value"]}, "code_block": [[9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [9, 9], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-pip-trusted-host", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_16", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with pip via the 'PIP_TRUSTED_HOST' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV DATABASE_PASSWORD=supersecret123\n", "value": "DATABASE_PASSWORD=supersecret123", "__startline__": 9, "__endline__": 9, "resource_type": "ENV", "hash": "45db84a72b1a90970da574ae35670c496d893686cb92ff20c77d5ad9c2d8502b"}, "evaluated_keys": ["value"]}, "code_block": [[10, "ENV DATABASE_PASSWORD=supersecret123\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [10, 10], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-pip-trusted-host", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_16", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with pip via the 'PIP_TRUSTED_HOST' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "ENV", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10}, "label_": "resource: ENV", "id_": "ENV", "source_": "Dockerfile", "content": "ENV JWT_SECRET=my-super-secret-jwt-key\n", "value": "JWT_SECRET=my-super-secret-jwt-key", "__startline__": 10, "__endline__": 10, "resource_type": "ENV", "hash": "b0d096d21598a110f33ef0b95f9327791c338ce61f4caee08be9b968b997480e"}, "evaluated_keys": ["value"]}, "code_block": [[11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [11, 11], "resource": "/docker/Dockerfile.ENV", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-pip-trusted-host", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_16", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with pip via the 'PIP_TRUSTED_HOST' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-pip-trusted-host", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_16", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with pip via the 'PIP_TRUSTED_HOST' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-pip-trusted-host", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_16", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with pip via the 'PIP_TRUSTED_HOST' environment variable", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-pip-trusted-host", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_9", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing GPG signatures are not used by dnf, tdnf, or yum via the '--nogpgcheck' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-yum-signed", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_9", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing GPG signatures are not used by dnf, tdnf, or yum via the '--nogpgcheck' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-yum-signed", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_9", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing GPG signatures are not used by dnf, tdnf, or yum via the '--nogpgcheck' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-yum-signed", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_2", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with curl", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-curl-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_2", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with curl", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-curl-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_2", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with curl", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-curl-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_7", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing signatures are not used by apk via the '--allow-untrusted' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apk-trusted", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_7", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing signatures are not used by apk via the '--allow-untrusted' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apk-trusted", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_7", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing signatures are not used by apk via the '--allow-untrusted' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apk-trusted", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_11", "bc_check_id": null, "check_name": "Ensure that the '--force-yes' option is not used, as it disables signature validation and allows packages to be downgraded which can leave the system in a broken or inconsistent state", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apt-force", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_11", "bc_check_id": null, "check_name": "Ensure that the '--force-yes' option is not used, as it disables signature validation and allows packages to be downgraded which can leave the system in a broken or inconsistent state", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apt-force", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_11", "bc_check_id": null, "check_name": "Ensure that the '--force-yes' option is not used, as it disables signature validation and allows packages to be downgraded which can leave the system in a broken or inconsistent state", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apt-force", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_13", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for npm or yarn by setting the option strict-ssl to false", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-npm-strict-ssl2", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_13", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for npm or yarn by setting the option strict-ssl to false", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-npm-strict-ssl2", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_13", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled for npm or yarn by setting the option strict-ssl to false", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-npm-strict-ssl2", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_3", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with wget", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-wget-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_3", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with wget", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-wget-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_3", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with wget", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-wget-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_4", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the pip '--trusted-host' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-pip-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_4", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the pip '--trusted-host' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-pip-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_4", "bc_check_id": null, "check_name": "Ensure that certificate validation isn't disabled with the pip '--trusted-host' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-pip-secure", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_15", "bc_check_id": null, "check_name": "Ensure that the yum and dnf package managers are not configured to disable SSL certificate validation via the 'sslverify' configuration option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-yum-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_15", "bc_check_id": null, "check_name": "Ensure that the yum and dnf package managers are not configured to disable SSL certificate validation via the 'sslverify' configuration option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-yum-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_15", "bc_check_id": null, "check_name": "Ensure that the yum and dnf package managers are not configured to disable SSL certificate validation via the 'sslverify' configuration option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-yum-ssl", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_8", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing signatures are not used by apt-get via the '--allow-unauthenticated' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apt-authenticated", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_8", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing signatures are not used by apt-get via the '--allow-unauthenticated' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apt-authenticated", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_8", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing signatures are not used by apt-get via the '--allow-unauthenticated' option", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-apt-authenticated", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_10", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing signatures are not used by rpm via the '--nodigest', '--nosignature', '--noverify', or '--nofiledigest' options", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-rpm-signed", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_10", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing signatures are not used by rpm via the '--nodigest', '--nosignature', '--noverify', or '--nofiledigest' options", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install\n", "value": "npm install", "__startline__": 30, "__endline__": 30, "resource_type": "RUN", "hash": "2fd627ca257fa698448c4e1ae6aee900547bc0305e4824a1219742455c265c16"}, "evaluated_keys": ["value"]}, "code_block": [[31, "RUN npm install\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [31, 31], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-rpm-signed", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_10", "bc_check_id": null, "check_name": "Ensure that packages with untrusted or missing signatures are not used by rpm via the '--nodigest', '--nosignature', '--noverify', or '--nofiledigest' options", "check_result": {"result": "PASSED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN npm install -g nodemon pm2\n", "value": "npm install -g nodemon pm2", "__startline__": 33, "__endline__": 33, "resource_type": "RUN", "hash": "58d7169dd3dffd0a114f0d6125c52a80504bb030835e39243a9e78758e6975f9"}, "evaluated_keys": ["value"]}, "code_block": [[34, "RUN npm install -g nodemon pm2\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [34, 34], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-rpm-signed", "details": [], "check_len": null, "definition_context_file_path": null}], "failed_checks": [{"check_id": "CKV_DOCKER_1", "bc_check_id": "BC_DKR_1", "check_name": "Ensure port 22 is not exposed", "check_result": {"result": "FAILED", "results_configuration": [{"instruction": "EXPOSE", "startline": 36, "endline": 36, "content": "EXPOSE 3000 8080 9000 22\n", "value": "3000 8080 9000 22"}]}, "code_block": [[37, "EXPOSE 3000 8080 9000 22\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [37, 37], "resource": "/docker/Dockerfile.EXPOSE", "evaluations": null, "check_class": "checkov.dockerfile.checks.ExposePort22", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-port-22-is-not-exposed", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV_DOCKER_7", "bc_check_id": "BC_DKR_7", "check_name": "Ensure the base image uses a non latest version tag", "check_result": {"result": "FAILED", "results_configuration": [{"instruction": "FROM", "startline": 3, "endline": 3, "content": "FROM node:latest\n", "value": "node:latest"}]}, "code_block": [[4, "FROM node:latest\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [4, 4], "resource": "/docker/Dockerfile.FROM", "evaluations": null, "check_class": "checkov.dockerfile.checks.ReferenceLatestTag", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-the-base-image-uses-a-non-latest-version-tag", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV_DOCKER_2", "bc_check_id": "BC_DKR_2", "check_name": "Ensure that HEALTHCHECK instructions have been added to container images", "check_result": {"result": "FAILED", "results_configuration": null}, "code_block": [[1, "# INSECURE Dockerfile for Testing Security Scanners\n"], [2, "\n"], [3, "# INSECURE: Using latest tag (not pinned)\n"], [4, "FROM node:latest\n"], [5, "\n"], [6, "# INSECURE: Running as root (no USER instruction)\n"], [7, "\n"], [8, "# INSECURE: Hardcoded secrets in environment\n"], [9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [10, "ENV DATABASE_PASSWORD=supersecret123\n"], [11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"], [12, "\n"], [13, "WORKDIR /app\n"], [14, "\n"], [15, "# INSECURE: Installing unnecessary packages that increase attack surface\n"], [16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"], [26, "\n"], [27, "# INSECURE: Copying everything (no .dockerignore)\n"], [28, "COPY . .\n"], [29, "\n"], [30, "# INSECURE: Installing packages with npm (not npm ci)\n"], [31, "RUN npm install\n"], [32, "\n"], [33, "# INSECURE: Installing packages as root with elevated privileges\n"], [34, "RUN npm install -g nodemon pm2\n"], [35, "\n"], [36, "# INSECURE: Exposing unnecessary ports\n"], [37, "EXPOSE 3000 8080 9000 22\n"], [38, "\n"], [39, "# INSECURE: Running application as root\n"], [40, "CMD [\"node\", \"server.js\"]"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [1, 40], "resource": "/docker/Dockerfile.", "evaluations": null, "check_class": "checkov.dockerfile.checks.HealthcheckExists", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-that-healthcheck-instructions-have-been-added-to-container-images", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV_DOCKER_3", "bc_check_id": "BC_DKR_3", "check_name": "Ensure that a user for the container has been created", "check_result": {"result": "FAILED", "results_configuration": null}, "code_block": [[1, "# INSECURE Dockerfile for Testing Security Scanners\n"], [2, "\n"], [3, "# INSECURE: Using latest tag (not pinned)\n"], [4, "FROM node:latest\n"], [5, "\n"], [6, "# INSECURE: Running as root (no USER instruction)\n"], [7, "\n"], [8, "# INSECURE: Hardcoded secrets in environment\n"], [9, "ENV API_KEY=sk-1234567890abcdef1234567890abcdef\n"], [10, "ENV DATABASE_PASSWORD=supersecret123\n"], [11, "ENV JWT_SECRET=my-super-secret-jwt-key\n"], [12, "\n"], [13, "WORKDIR /app\n"], [14, "\n"], [15, "# INSECURE: Installing unnecessary packages that increase attack surface\n"], [16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"], [26, "\n"], [27, "# INSECURE: Copying everything (no .dockerignore)\n"], [28, "COPY . .\n"], [29, "\n"], [30, "# INSECURE: Installing packages with npm (not npm ci)\n"], [31, "RUN npm install\n"], [32, "\n"], [33, "# INSECURE: Installing packages as root with elevated privileges\n"], [34, "RUN npm install -g nodemon pm2\n"], [35, "\n"], [36, "# INSECURE: Exposing unnecessary ports\n"], [37, "EXPOSE 3000 8080 9000 22\n"], [38, "\n"], [39, "# INSECURE: Running application as root\n"], [40, "CMD [\"node\", \"server.js\"]"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [1, 40], "resource": "/docker/Dockerfile.", "evaluations": null, "check_class": "checkov.dockerfile.checks.UserExists", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-that-a-user-for-the-container-has-been-created", "details": [], "check_len": null, "definition_context_file_path": null}, {"check_id": "CKV2_DOCKER_1", "bc_check_id": null, "check_name": "Ensure that sudo isn't used", "check_result": {"result": "FAILED", "entity": {"block_name_": "RUN", "block_type_": "resource", "file_path_": "/docker/Dockerfile", "config_": {"content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24}, "label_": "resource: RUN", "id_": "RUN", "source_": "Dockerfile", "content": "RUN apt-get update && apt-get install -y \\\n    curl \\\n    wget \\\n    vim \\\n    git \\\n    sudo \\\n    ssh \\\n    telnet \\\n    ftp \\\n    && rm -rf /var/lib/apt/lists/*\n", "value": "apt-get update && apt-get install -y     curl     wget     vim     git     sudo     ssh     telnet     ftp     && rm -rf /var/lib/apt/lists/*", "__startline__": 15, "__endline__": 24, "resource_type": "RUN", "hash": "249be9191a3bf1ba51c2c171ca1d4afd9147aa269fd50332fb1e109fd22e4658"}, "evaluated_keys": ["value"]}, "code_block": [[16, "RUN apt-get update && apt-get install -y \\\n"], [17, "    curl \\\n"], [18, "    wget \\\n"], [19, "    vim \\\n"], [20, "    git \\\n"], [21, "    sudo \\\n"], [22, "    ssh \\\n"], [23, "    telnet \\\n"], [24, "    ftp \\\n"], [25, "    && rm -rf /var/lib/apt/lists/*\n"]], "file_path": "/docker/Dockerfile", "file_abs_path": "/tf/docker/Dockerfile", "repo_file_path": "/tf/docker/Dockerfile", "file_line_range": [16, 25], "resource": "/docker/Dockerfile.RUN", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-docker-dont-use-sudo", "details": [], "check_len": null, "definition_context_file_path": null}], "skipped_checks": [], "parsing_errors": []}, "summary": {"passed": 69, "failed": 5, "skipped": 0, "parsing_errors": 0, "resource_count": 1, "checkov_version": "3.2.467"}, "url": "Add an api key '--bc-api-key <api-key>' to see more detailed insights via https://bridgecrew.cloud"}, {"check_type": "secrets", "results": {"passed_checks": [], "failed_checks": [{"check_id": "CKV_SECRET_6", "bc_check_id": "BC_GIT_6", "check_name": "Base64 High Entropy String", "check_result": {"result": "FAILED"}, "code_block": [[32, "      MYSQL_ROOT_PASSWORD: roo**********\n"]], "file_path": "/docker/docker-compose.yml", "file_abs_path": "/tf/docker/docker-compose.yml", "repo_file_path": "/tf/docker/docker-compose.yml", "file_line_range": [32, 33], "resource": "db0295c3d2c1ae7a9f31f25d3e599d316f9da95a", "evaluations": null, "check_class": "", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/secrets-policies/secrets-policy-index/git-secrets-6", "details": [], "check_len": null, "definition_context_file_path": null, "validation_status": "Unavailable", "added_commit_hash": "", "removed_commit_hash": "", "added_by": "", "removed_date": "", "added_date": ""}, {"check_id": "CKV_SECRET_6", "bc_check_id": "BC_GIT_6", "check_name": "Base64 High Entropy String", "check_result": {"result": "FAILED"}, "code_block": [[35, "      MYSQL_PASSWORD: pa**********\n"]], "file_path": "/docker/docker-compose.yml", "file_abs_path": "/tf/docker/docker-compose.yml", "repo_file_path": "/tf/docker/docker-compose.yml", "file_line_range": [35, 36], "resource": "cbfdac6008f9cab4083784cbd1874f76618d2a97", "evaluations": null, "check_class": "", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/secrets-policies/secrets-policy-index/git-secrets-6", "details": [], "check_len": null, "definition_context_file_path": null, "validation_status": "Unavailable", "added_commit_hash": "", "removed_commit_hash": "", "added_by": "", "removed_date": "", "added_date": ""}, {"check_id": "CKV_SECRET_6", "bc_check_id": "BC_GIT_6", "check_name": "Base64 High Entropy String", "check_result": {"result": "FAILED"}, "code_block": [[111, "              export API_KEY=sk-123**********\n"]], "file_path": "/terraform/main.tf", "file_abs_path": "/tf/terraform/main.tf", "repo_file_path": "/tf/terraform/main.tf", "file_line_range": [111, 112], "resource": "1043071fb8eddffe7fd732ed7b77935864b76701", "evaluations": null, "check_class": "", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/secrets-policies/secrets-policy-index/git-secrets-6", "details": [], "check_len": null, "definition_context_file_path": null, "validation_status": "Unavailable", "added_commit_hash": "", "removed_commit_hash": "", "added_by": "", "removed_date": "", "added_date": ""}], "skipped_checks": [], "parsing_errors": []}, "summary": {"passed": 0, "failed": 3, "skipped": 0, "parsing_errors": 0, "resource_count": 3, "checkov_version": "3.2.467"}, "url": "Add an api key '--bc-api-key <api-key>' to see more detailed insights via https://bridgecrew.cloud"}, {"check_type": "github_actions", "results": {"passed_checks": [{"check_id": "CKV_GHA_5", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sign execution in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-scan": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}, {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}, {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}, {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}, {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}, {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}, {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}], "__startline__": 14, "__endline__": 95}, "__startline__": 13, "__endline__": 95}}, "code_block": [[13, "  security-scan:\n"], [14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [13, 96], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignArtifacts", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}, {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}, {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}, {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}, {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}, {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}, {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}], "__startline__": 14, "__endline__": 95}}, "code_block": [[14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [14, 96], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_6", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sbom attestation in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-scan": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}, {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}, {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}, {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}, {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}, {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}, {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}], "__startline__": 14, "__endline__": 95}, "__startline__": 13, "__endline__": 95}}, "code_block": [[13, "  security-scan:\n"], [14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [13, 96], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignSBOM", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}, {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}, {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}, {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}, {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}, {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}, {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}], "__startline__": 14, "__endline__": 95}}, "code_block": [[14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [14, 96], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}, {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}, {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}, {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}, {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}, {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}, {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}], "__startline__": 14, "__endline__": 95}}, "code_block": [[14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [14, 96], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}, {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}, {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}, {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}, {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}, {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}, {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}], "__startline__": 14, "__endline__": 95}}, "code_block": [[14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [14, 96], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_7", "bc_check_id": null, "check_name": "The build output cannot be affected by user parameters other than the build entry point and the top-level source location. GitHub Actions workflow_dispatch inputs MUST be empty. ", "check_result": {"result": "PASSED", "results_configuration": {"push": {"branches": ["main", "develop"], "__startline__": 5, "__endline__": 6}, "pull_request": {"branches": ["main"], "__startline__": 7, "__endline__": 8}, "schedule": [{"cron": "0 2 * * *", "__startline__": 10, "__endline__": 12}], "__startline__": 4, "__endline__": 12}}, "code_block": [[4, "  push:\n"], [5, "    branches: [ main, develop ]\n"], [6, "  pull_request:\n"], [7, "    branches: [ main ]\n"], [8, "  schedule:\n"], [9, "    # Run daily at 2 AM UTC\n"], [10, "    - cron: '0 2 * * *'\n"], [11, "\n"], [12, "jobs:\n"], [13, "  security-scan:\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [4, 13], "resource": "on(Security Scan with Station Agents)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.EmptyWorkflowDispatch", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": [""], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}}, "code_block": [[17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [17, 21], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}}, "code_block": [[20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [20, 26], "resource": "jobs(security-scan).steps[2](Install Station CLI)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}}, "code_block": [[25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [25, 31], "resource": "jobs(security-scan).steps[3](Setup Station Environment)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}}, "code_block": [[30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [30, 37], "resource": "jobs(security-scan).steps[4](Install Security Scanner Bundle)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}}, "code_block": [[36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [36, 45], "resource": "jobs(security-scan).steps[5](Run Terraform Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}}, "code_block": [[44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [44, 53], "resource": "jobs(security-scan).steps[6](Run Container Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}}, "code_block": [[52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [52, 61], "resource": "jobs(security-scan).steps[7](Run Code Vulnerability Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}}, "code_block": [[60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [60, 76], "resource": "jobs(security-scan).steps[8](Generate Security Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}}, "code_block": [[75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [75, 96], "resource": "jobs(security-scan).steps[9](Comment PR with Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}}, "code_block": [[17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [17, 21], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}}, "code_block": [[20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [20, 26], "resource": "jobs(security-scan).steps[2](Install Station CLI)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}}, "code_block": [[25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [25, 31], "resource": "jobs(security-scan).steps[3](Setup Station Environment)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}}, "code_block": [[30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [30, 37], "resource": "jobs(security-scan).steps[4](Install Security Scanner Bundle)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}}, "code_block": [[36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [36, 45], "resource": "jobs(security-scan).steps[5](Run Terraform Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}}, "code_block": [[44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [44, 53], "resource": "jobs(security-scan).steps[6](Run Container Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}}, "code_block": [[52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [52, 61], "resource": "jobs(security-scan).steps[7](Run Code Vulnerability Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}}, "code_block": [[60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [60, 76], "resource": "jobs(security-scan).steps[8](Generate Security Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}}, "code_block": [[75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [75, 96], "resource": "jobs(security-scan).steps[9](Comment PR with Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}}, "code_block": [[17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [17, 21], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}}, "code_block": [[20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [20, 26], "resource": "jobs(security-scan).steps[2](Install Station CLI)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}}, "code_block": [[25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [25, 31], "resource": "jobs(security-scan).steps[3](Setup Station Environment)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}}, "code_block": [[30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [30, 37], "resource": "jobs(security-scan).steps[4](Install Security Scanner Bundle)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}}, "code_block": [[36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [36, 45], "resource": "jobs(security-scan).steps[5](Run Terraform Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}}, "code_block": [[44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [44, 53], "resource": "jobs(security-scan).steps[6](Run Container Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}}, "code_block": [[52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [52, 61], "resource": "jobs(security-scan).steps[7](Run Code Vulnerability Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}}, "code_block": [[60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [60, 76], "resource": "jobs(security-scan).steps[8](Generate Security Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}}, "code_block": [[75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [75, 96], "resource": "jobs(security-scan).steps[9](Comment PR with Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}}, "code_block": [[17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Install Station CLI\n"], [21, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [17, 21], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Install Station CLI", "run": "curl -sSL https://install.station.dev | bash\necho \"$HOME/.local/bin\" >> $GITHUB_PATH\n", "__startline__": 20, "__endline__": 25}}, "code_block": [[20, "    - name: Install Station CLI\n"], [21, "      run: |\n"], [22, "        curl -sSL https://install.station.dev | bash\n"], [23, "        echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n"], [24, "    \n"], [25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [20, 26], "resource": "jobs(security-scan).steps[2](Install Station CLI)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Setup Station Environment", "run": "mkdir -p ~/.config/station/environments/cicd-security\necho \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n", "__startline__": 25, "__endline__": 30}}, "code_block": [[25, "    - name: Setup Station Environment\n"], [26, "      run: |\n"], [27, "        mkdir -p ~/.config/station/environments/cicd-security\n"], [28, "        echo \"PROJECT_ROOT: ${{ github.workspace }}\" > ~/.config/station/environments/cicd-security/variables.yml\n"], [29, "    \n"], [30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [25, 31], "resource": "jobs(security-scan).steps[3](Setup Station Environment)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Install Security Scanner Bundle", "run": "stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 34, "__endline__": 36}, "__startline__": 30, "__endline__": 36}}, "code_block": [[30, "    - name: Install Security Scanner Bundle  \n"], [31, "      run: |\n"], [32, "        stn template install https://registry.station.dev/bundles/security-scanner-bundle.tar.gz\n"], [33, "      env:\n"], [34, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [35, "    \n"], [36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [30, 37], "resource": "jobs(security-scan).steps[4](Install Security Scanner Bundle)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Terraform Security Scan", "id": "terraform-scan", "run": "stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 41, "__endline__": 42}, "continue-on-error": true, "__startline__": 36, "__endline__": 44}}, "code_block": [[36, "    - name: Run Terraform Security Scan\n"], [37, "      id: terraform-scan\n"], [38, "      run: |\n"], [39, "        stn agent call terraform-security-auditor \"Scan the terraform/ directory for security vulnerabilities, misconfigurations, and compliance violations. Focus on critical issues.\"\n"], [40, "      env:\n"], [41, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [42, "      continue-on-error: true\n"], [43, "    \n"], [44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [36, 45], "resource": "jobs(security-scan).steps[5](Run Terraform Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Container Security Scan", "id": "container-scan", "run": "stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 49, "__endline__": 50}, "continue-on-error": true, "__startline__": 44, "__endline__": 52}}, "code_block": [[44, "    - name: Run Container Security Scan  \n"], [45, "      id: container-scan\n"], [46, "      run: |\n"], [47, "        stn agent call container-security-scanner \"Analyze all Docker files and docker-compose.yml for security vulnerabilities and misconfigurations. Check for running as root, secrets, vulnerable images.\"\n"], [48, "      env:\n"], [49, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [50, "      continue-on-error: true\n"], [51, "    \n"], [52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [44, 53], "resource": "jobs(security-scan).steps[6](Run Container Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Code Vulnerability Scan", "id": "code-scan", "run": "stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n", "env": {"OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}", "__startline__": 57, "__endline__": 58}, "continue-on-error": true, "__startline__": 52, "__endline__": 60}}, "code_block": [[52, "    - name: Run Code Vulnerability Scan\n"], [53, "      id: code-scan  \n"], [54, "      run: |\n"], [55, "        stn agent call code-vulnerability-detector \"Scan the Python and JavaScript code for security vulnerabilities like SQL injection, XSS, command injection, and other OWASP Top 10 issues.\"\n"], [56, "      env:\n"], [57, "        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n"], [58, "      continue-on-error: true\n"], [59, "    \n"], [60, "    - name: Generate Security Report\n"], [61, "      run: |\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [52, 61], "resource": "jobs(security-scan).steps[7](Run Code Vulnerability Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report", "run": "echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 60, "__endline__": 75}}, "code_block": [[60, "    - name: Generate Security Report\n"], [61, "      run: |\n"], [62, "        echo \"# Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [65, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [66, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [67, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [68, "        echo \"Station security agents completed scanning for:\" >> $GITHUB_STEP_SUMMARY\n"], [69, "        echo \"- \u2705 Terraform security issues and compliance violations\" >> $GITHUB_STEP_SUMMARY\n"], [70, "        echo \"- \u2705 Container security vulnerabilities and misconfigurations\" >> $GITHUB_STEP_SUMMARY\n"], [71, "        echo \"- \u2705 Source code vulnerabilities and insecure practices\" >> $GITHUB_STEP_SUMMARY\n"], [72, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [73, "        echo \"Review the individual step outputs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [74, "\n"], [75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [60, 76], "resource": "jobs(security-scan).steps[8](Generate Security Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Security Scan Results\n  \n  Station security agents have completed their analysis:\n  \n  - **Terraform Security**: Checked infrastructure for misconfigurations\n  - **Container Security**: Analyzed Docker files for vulnerabilities  \n  - **Code Security**: Scanned source code for security issues\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) Security Agents_`\n})", "__startline__": 79, "__endline__": 95}, "__startline__": 75, "__endline__": 95}}, "code_block": [[75, "    - name: Comment PR with Results\n"], [76, "      if: github.event_name == 'pull_request'\n"], [77, "      uses: actions/github-script@v7\n"], [78, "      with:\n"], [79, "        script: |\n"], [80, "          github.rest.issues.createComment({\n"], [81, "            issue_number: context.issue.number,\n"], [82, "            owner: context.repo.owner,\n"], [83, "            repo: context.repo.repo,\n"], [84, "            body: `## \ud83d\udd12 Security Scan Results\n"], [85, "            \n"], [86, "            Station security agents have completed their analysis:\n"], [87, "            \n"], [88, "            - **Terraform Security**: Checked infrastructure for misconfigurations\n"], [89, "            - **Container Security**: Analyzed Docker files for vulnerabilities  \n"], [90, "            - **Code Security**: Scanned source code for security issues\n"], [91, "            \n"], [92, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [93, "            \n"], [94, "            _Powered by [Station](https://station.dev) Security Agents_`\n"], [95, "          })"]], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [75, 96], "resource": "jobs(security-scan).steps[9](Comment PR with Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV_GHA_5", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sign execution in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-scan": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}, {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}, {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}, {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}, {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}], "__startline__": 14, "__endline__": 109}, "__startline__": 13, "__endline__": 109}}, "code_block": [[13, "  security-scan:\n"], [14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [13, 110], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignArtifacts", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}, {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}, {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}, {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}, {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}], "__startline__": 14, "__endline__": 109}}, "code_block": [[14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [14, 110], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_6", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sbom attestation in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-scan": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}, {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}, {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}, {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}, {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}], "__startline__": 14, "__endline__": 109}, "__startline__": 13, "__endline__": 109}}, "code_block": [[13, "  security-scan:\n"], [14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [13, 110], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignSBOM", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}, {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}, {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}, {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}, {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}], "__startline__": 14, "__endline__": 109}}, "code_block": [[14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [14, 110], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}, {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}, {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}, {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}, {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}], "__startline__": 14, "__endline__": 109}}, "code_block": [[14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [14, 110], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}, {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}, {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}, {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}, {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}, {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}, {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}], "__startline__": 14, "__endline__": 109}}, "code_block": [[14, "    runs-on: ubuntu-latest\n"], [15, "    \n"], [16, "    steps:\n"], [17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [14, 110], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_7", "bc_check_id": null, "check_name": "The build output cannot be affected by user parameters other than the build entry point and the top-level source location. GitHub Actions workflow_dispatch inputs MUST be empty. ", "check_result": {"result": "PASSED", "results_configuration": {"push": {"branches": ["main", "develop"], "__startline__": 5, "__endline__": 6}, "pull_request": {"branches": ["main"], "__startline__": 7, "__endline__": 8}, "schedule": [{"cron": "0 2 * * *", "__startline__": 10, "__endline__": 12}], "__startline__": 4, "__endline__": 12}}, "code_block": [[4, "  push:\n"], [5, "    branches: [ main, develop ]\n"], [6, "  pull_request:\n"], [7, "    branches: [ main ]\n"], [8, "  schedule:\n"], [9, "    # Run daily at 2 AM UTC\n"], [10, "    - cron: '0 2 * * *'\n"], [11, "\n"], [12, "jobs:\n"], [13, "  security-scan:\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [4, 13], "resource": "on(Station Docker Container Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.EmptyWorkflowDispatch", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": [""], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}}, "code_block": [[17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [17, 21], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}}, "code_block": [[20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [20, 27], "resource": "jobs(security-scan).steps[2](Pull Station Bundle Container)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}}, "code_block": [[26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [26, 43], "resource": "jobs(security-scan).steps[3](Run DevOps Troubleshooting Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}}, "code_block": [[42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [42, 59], "resource": "jobs(security-scan).steps[4](Run Deployment Diagnosis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}}, "code_block": [[58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [58, 75], "resource": "jobs(security-scan).steps[5](Run Server Performance Analysis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}}, "code_block": [[74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [74, 90], "resource": "jobs(security-scan).steps[6](Generate DevOps Analysis Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}}, "code_block": [[89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [89, 110], "resource": "jobs(security-scan).steps[7](Comment PR with Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}}, "code_block": [[17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [17, 21], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}}, "code_block": [[20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [20, 27], "resource": "jobs(security-scan).steps[2](Pull Station Bundle Container)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}}, "code_block": [[26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [26, 43], "resource": "jobs(security-scan).steps[3](Run DevOps Troubleshooting Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}}, "code_block": [[42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [42, 59], "resource": "jobs(security-scan).steps[4](Run Deployment Diagnosis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}}, "code_block": [[58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [58, 75], "resource": "jobs(security-scan).steps[5](Run Server Performance Analysis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}}, "code_block": [[74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [74, 90], "resource": "jobs(security-scan).steps[6](Generate DevOps Analysis Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}}, "code_block": [[89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [89, 110], "resource": "jobs(security-scan).steps[7](Comment PR with Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}}, "code_block": [[17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [17, 21], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}}, "code_block": [[20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [20, 27], "resource": "jobs(security-scan).steps[2](Pull Station Bundle Container)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}}, "code_block": [[26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [26, 43], "resource": "jobs(security-scan).steps[3](Run DevOps Troubleshooting Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}}, "code_block": [[42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [42, 59], "resource": "jobs(security-scan).steps[4](Run Deployment Diagnosis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}}, "code_block": [[58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [58, 75], "resource": "jobs(security-scan).steps[5](Run Server Performance Analysis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}}, "code_block": [[74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [74, 90], "resource": "jobs(security-scan).steps[6](Generate DevOps Analysis Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}}, "code_block": [[89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [89, 110], "resource": "jobs(security-scan).steps[7](Comment PR with Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 17, "__endline__": 20}}, "code_block": [[17, "    - name: Checkout Code\n"], [18, "      uses: actions/checkout@v4\n"], [19, "      \n"], [20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [17, 21], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Pull Station Bundle Container", "run": "# In production, this would pull from a registry\n# For demo, we'll build it locally (simulating registry pull)\necho \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n", "__startline__": 20, "__endline__": 26}}, "code_block": [[20, "    - name: Pull Station Bundle Container\n"], [21, "      run: |\n"], [22, "        # In production, this would pull from a registry\n"], [23, "        # For demo, we'll build it locally (simulating registry pull)\n"], [24, "        echo \"In production: docker pull your-registry.com/station-bundle-test:latest\"\n"], [25, "      \n"], [26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [20, 27], "resource": "jobs(security-scan).steps[2](Pull Station Bundle Container)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run DevOps Troubleshooting Scan", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 26, "__endline__": 42}}, "code_block": [[26, "    - name: Run DevOps Troubleshooting Scan\n"], [27, "      run: |\n"], [28, "        docker run --rm \\\n"], [29, "          -v ${{ github.workspace }}:/workspace \\\n"], [30, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [31, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [32, "          station-cicd-security-demo:latest \\\n"], [33, "          bash -c \"\n"], [34, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [35, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [36, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [37, "            stn sync bundle-test && \\\n"], [38, "            stn agent run 'Environment Troubleshooter' 'Analyze this project for common environment setup issues and configuration problems that might cause \\\"it works on my machine\\\" scenarios. Focus on terraform files, scripts, and configuration files.' --env bundle-test\n"], [39, "          \"\n"], [40, "      continue-on-error: true\n"], [41, "    \n"], [42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [26, 43], "resource": "jobs(security-scan).steps[3](Run DevOps Troubleshooting Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Deployment Diagnosis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 42, "__endline__": 58}}, "code_block": [[42, "    - name: Run Deployment Diagnosis\n"], [43, "      run: |\n"], [44, "        docker run --rm \\\n"], [45, "          -v ${{ github.workspace }}:/workspace \\\n"], [46, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [47, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [48, "          station-cicd-security-demo:latest \\\n"], [49, "          bash -c \"\n"], [50, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [51, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [52, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [53, "            stn sync bundle-test && \\\n"], [54, "            stn agent run 'Deployment Diagnosis Agent' 'Review this CICD setup for potential deployment issues. Analyze GitHub Actions workflows, scripts, and configuration files for common deployment problems.' --env bundle-test\n"], [55, "          \"\n"], [56, "      continue-on-error: true\n"], [57, "      \n"], [58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [42, 59], "resource": "jobs(security-scan).steps[4](Run Deployment Diagnosis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Server Performance Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/bundle-test && \\\n    cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n    stn sync bundle-test && \\\n    stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n  \"\n", "continue-on-error": true, "__startline__": 58, "__endline__": 74}}, "code_block": [[58, "    - name: Run Server Performance Analysis  \n"], [59, "      run: |\n"], [60, "        docker run --rm \\\n"], [61, "          -v ${{ github.workspace }}:/workspace \\\n"], [62, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [63, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [64, "          station-cicd-security-demo:latest \\\n"], [65, "          bash -c \"\n"], [66, "            mkdir -p /root/.config/station/environments/bundle-test && \\\n"], [67, "            cp -r /app/environment/* /root/.config/station/environments/bundle-test/ && \\\n"], [68, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/bundle-test/variables.yml && \\\n"], [69, "            stn sync bundle-test && \\\n"], [70, "            stn agent run 'Server Performance Monitor' 'Analyze the project structure and configurations for potential server performance issues. Look at any server configs, deployment setups, or infrastructure code.' --env bundle-test\n"], [71, "          \"\n"], [72, "      continue-on-error: true\n"], [73, "\n"], [74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [58, 75], "resource": "jobs(security-scan).steps[5](Run Server Performance Analysis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate DevOps Analysis Report", "run": "echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \necho \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 74, "__endline__": 89}}, "code_block": [[74, "    - name: Generate DevOps Analysis Report\n"], [75, "      run: |\n"], [76, "        echo \"# DevOps Analysis Results\" >> $GITHUB_STEP_SUMMARY\n"], [77, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [78, "        echo \"## Repository: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY  \n"], [79, "        echo \"## Commit: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [80, "        echo \"## Scan Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"Station DevOps agents completed analysis for:\" >> $GITHUB_STEP_SUMMARY\n"], [83, "        echo \"- \u2705 Environment troubleshooting and configuration analysis\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- \u2705 Deployment pipeline diagnosis and issue detection\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- \u2705 Server performance analysis and optimization recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"_Powered by [Station](https://station.dev) DevOps Agents in Docker Container_\" >> $GITHUB_STEP_SUMMARY\n"], [88, "\n"], [89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [74, 90], "resource": "jobs(security-scan).steps[6](Generate DevOps Analysis Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd27 DevOps Analysis Results\n  \n  Station DevOps agents have completed their analysis using containerized environment:\n  \n  - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n  - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n  - **Performance Analysis**: Examined infrastructure and server configurations\n  \n  Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n  \n  _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n})", "__startline__": 93, "__endline__": 109}, "__startline__": 89, "__endline__": 109}}, "code_block": [[89, "    - name: Comment PR with Results\n"], [90, "      if: github.event_name == 'pull_request'\n"], [91, "      uses: actions/github-script@v7\n"], [92, "      with:\n"], [93, "        script: |\n"], [94, "          github.rest.issues.createComment({\n"], [95, "            issue_number: context.issue.number,\n"], [96, "            owner: context.repo.owner,\n"], [97, "            repo: context.repo.repo,\n"], [98, "            body: `## \ud83d\udd27 DevOps Analysis Results\n"], [99, "            \n"], [100, "            Station DevOps agents have completed their analysis using containerized environment:\n"], [101, "            \n"], [102, "            - **Environment Troubleshooting**: Analyzed configuration for \"works on my machine\" issues\n"], [103, "            - **Deployment Diagnosis**: Reviewed CICD setup for potential deployment problems  \n"], [104, "            - **Performance Analysis**: Examined infrastructure and server configurations\n"], [105, "            \n"], [106, "            Please review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings.\n"], [107, "            \n"], [108, "            _Powered by [Station](https://station.dev) DevOps Agents (Containerized)_`\n"], [109, "          })"]], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [89, 110], "resource": "jobs(security-scan).steps[7](Comment PR with Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": ["security-scan"], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV_GHA_5", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sign execution in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-audit": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}, {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}], "__startline__": 12, "__endline__": 65}, "__startline__": 11, "__endline__": 65}}, "code_block": [[11, "  security-audit:\n"], [12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [11, 66], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignArtifacts", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}, {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}], "__startline__": 12, "__endline__": 65}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [12, 66], "resource": "jobs(security-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_6", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sbom attestation in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-audit": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}, {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}], "__startline__": 12, "__endline__": 65}, "__startline__": 11, "__endline__": 65}}, "code_block": [[11, "  security-audit:\n"], [12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [11, 66], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignSBOM", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}, {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}], "__startline__": 12, "__endline__": 65}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [12, 66], "resource": "jobs(security-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}, {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}], "__startline__": 12, "__endline__": 65}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [12, 66], "resource": "jobs(security-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}, {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}], "__startline__": 12, "__endline__": 65}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [12, 66], "resource": "jobs(security-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_7", "bc_check_id": null, "check_name": "The build output cannot be affected by user parameters other than the build entry point and the top-level source location. GitHub Actions workflow_dispatch inputs MUST be empty. ", "check_result": {"result": "PASSED", "results_configuration": {"push": {"branches": ["main"], "__startline__": 5, "__endline__": 6}, "pull_request": {"branches": ["main"], "__startline__": 7, "__endline__": 8}, "workflow_dispatch": null, "__startline__": 4, "__endline__": 10}}, "code_block": [[4, "  push:\n"], [5, "    branches: [ main ]\n"], [6, "  pull_request:\n"], [7, "    branches: [ main ]\n"], [8, "  workflow_dispatch:\n"], [9, "\n"], [10, "jobs:\n"], [11, "  security-audit:\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [4, 11], "resource": "on(Simple DevOps Security Audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.EmptyWorkflowDispatch", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": [""], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [15, 19], "resource": "jobs(security-audit).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}}, "code_block": [[18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [18, 33], "resource": "jobs(security-audit).steps[2](Run Security Scanner Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}}, "code_block": [[32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [32, 47], "resource": "jobs(security-audit).steps[3](Run Terraform Security Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}}, "code_block": [[46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [46, 66], "resource": "jobs(security-audit).steps[4](Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [15, 19], "resource": "jobs(security-audit).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}}, "code_block": [[18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [18, 33], "resource": "jobs(security-audit).steps[2](Run Security Scanner Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}}, "code_block": [[32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [32, 47], "resource": "jobs(security-audit).steps[3](Run Terraform Security Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}}, "code_block": [[46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [46, 66], "resource": "jobs(security-audit).steps[4](Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [15, 19], "resource": "jobs(security-audit).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}}, "code_block": [[18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [18, 33], "resource": "jobs(security-audit).steps[2](Run Security Scanner Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}}, "code_block": [[32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [32, 47], "resource": "jobs(security-audit).steps[3](Run Terraform Security Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}}, "code_block": [[46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [46, 66], "resource": "jobs(security-audit).steps[4](Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [15, 19], "resource": "jobs(security-audit).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Security Scanner Agent", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 32}}, "code_block": [[18, "    - name: Run Security Scanner Agent\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-simple:latest \\\n"], [25, "          bash -c \"\n"], [26, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [27, "            stn sync default -i=false && \\\n"], [28, "            stn agent run 'Security Scanner' 'Scan this repository for secrets, API keys, and basic security issues. Use gitleaks to detect any exposed credentials.' --env default\n"], [29, "          \"\n"], [30, "      continue-on-error: false\n"], [31, "    \n"], [32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [18, 33], "resource": "jobs(security-audit).steps[2](Run Security Scanner Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Terraform Security Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n  \"\n", "continue-on-error": true, "__startline__": 32, "__endline__": 46}}, "code_block": [[32, "    - name: Run Terraform Security Auditor\n"], [33, "      run: |\n"], [34, "        docker run --rm \\\n"], [35, "          -v ${{ github.workspace }}:/workspace \\\n"], [36, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [37, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [38, "          station-devops-simple:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [41, "            stn sync default -i=false && \\\n"], [42, "            stn agent run 'Terraform Auditor' 'Analyze any Terraform configurations in this repository for security issues and compliance problems using checkov.' --env default\n"], [43, "          \"\n"], [44, "      continue-on-error: true\n"], [45, "\n"], [46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [32, 47], "resource": "jobs(security-audit).steps[3](Run Terraform Security Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\necho \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY", "__startline__": 46, "__endline__": 65}}, "code_block": [[46, "    - name: Generate Security Report Summary\n"], [47, "      run: |\n"], [48, "        echo \"# \ud83d\udd12 Simple DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [51, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"- **Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"- **Container**: station-devops-simple:latest\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"## \ud83d\udee1\ufe0f Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [57, "        echo \"\u2705 **Security Scanner**: Secret detection with gitleaks (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [58, "        echo \"\u2705 **Terraform Auditor**: Infrastructure security with checkov (10 tools)\" >> $GITHUB_STEP_SUMMARY  \n"], [59, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [60, "        echo \"## \ud83d\udd27 Tools Used (28 total)\" >> $GITHUB_STEP_SUMMARY\n"], [61, "        echo \"- **Secret Detection**: gitleaks for exposed credentials\" >> $GITHUB_STEP_SUMMARY\n"], [62, "        echo \"- **Infrastructure Security**: checkov for Terraform analysis\" >> $GITHUB_STEP_SUMMARY\n"], [63, "        echo \"- **File Access**: filesystem tools for code analysis\" >> $GITHUB_STEP_SUMMARY\n"], [64, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [65, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) with Ship CLI Security Tools_ \ud83d\ude80\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [46, 66], "resource": "jobs(security-audit).steps[4](Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV_GHA_5", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sign execution in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-audit": {"runs-on": "ubuntu-latest", "permissions": {"contents": "read", "pull-requests": "write", "packages": "read", "__startline__": 18, "__endline__": 22}, "steps": [{"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}, {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}, {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}, {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}, {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}, {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}, {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}], "__startline__": 16, "__endline__": 188}, "__startline__": 15, "__endline__": 188}}, "code_block": [[15, "  security-audit:\n"], [16, "    runs-on: ubuntu-latest\n"], [17, "    permissions:\n"], [18, "      contents: read\n"], [19, "      pull-requests: write\n"], [20, "      packages: read\n"], [21, "    \n"], [22, "    steps:\n"], [23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [15, 189], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignArtifacts", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "permissions": {"contents": "read", "pull-requests": "write", "packages": "read", "__startline__": 18, "__endline__": 22}, "steps": [{"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}, {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}, {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}, {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}, {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}, {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}, {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}], "__startline__": 16, "__endline__": 188}}, "code_block": [[16, "    runs-on: ubuntu-latest\n"], [17, "    permissions:\n"], [18, "      contents: read\n"], [19, "      pull-requests: write\n"], [20, "      packages: read\n"], [21, "    \n"], [22, "    steps:\n"], [23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [16, 189], "resource": "jobs(security-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_6", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sbom attestation in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-audit": {"runs-on": "ubuntu-latest", "permissions": {"contents": "read", "pull-requests": "write", "packages": "read", "__startline__": 18, "__endline__": 22}, "steps": [{"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}, {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}, {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}, {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}, {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}, {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}, {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}], "__startline__": 16, "__endline__": 188}, "__startline__": 15, "__endline__": 188}}, "code_block": [[15, "  security-audit:\n"], [16, "    runs-on: ubuntu-latest\n"], [17, "    permissions:\n"], [18, "      contents: read\n"], [19, "      pull-requests: write\n"], [20, "      packages: read\n"], [21, "    \n"], [22, "    steps:\n"], [23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [15, 189], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignSBOM", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "permissions": {"contents": "read", "pull-requests": "write", "packages": "read", "__startline__": 18, "__endline__": 22}, "steps": [{"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}, {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}, {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}, {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}, {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}, {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}, {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}], "__startline__": 16, "__endline__": 188}}, "code_block": [[16, "    runs-on: ubuntu-latest\n"], [17, "    permissions:\n"], [18, "      contents: read\n"], [19, "      pull-requests: write\n"], [20, "      packages: read\n"], [21, "    \n"], [22, "    steps:\n"], [23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [16, 189], "resource": "jobs(security-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "permissions": {"contents": "read", "pull-requests": "write", "packages": "read", "__startline__": 18, "__endline__": 22}, "steps": [{"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}, {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}, {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}, {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}, {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}, {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}, {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}], "__startline__": 16, "__endline__": 188}}, "code_block": [[16, "    runs-on: ubuntu-latest\n"], [17, "    permissions:\n"], [18, "      contents: read\n"], [19, "      pull-requests: write\n"], [20, "      packages: read\n"], [21, "    \n"], [22, "    steps:\n"], [23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [16, 189], "resource": "jobs(security-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "permissions": {"contents": "read", "pull-requests": "write", "packages": "read", "__startline__": 18, "__endline__": 22}, "steps": [{"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}, {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}, {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}, {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}, {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}, {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}, {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}], "__startline__": 16, "__endline__": 188}}, "code_block": [[16, "    runs-on: ubuntu-latest\n"], [17, "    permissions:\n"], [18, "      contents: read\n"], [19, "      pull-requests: write\n"], [20, "      packages: read\n"], [21, "    \n"], [22, "    steps:\n"], [23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [16, 189], "resource": "jobs(security-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}}, "code_block": [[23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [23, 27], "resource": "jobs(security-audit).steps[1](\ud83d\udce5 Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}}, "code_block": [[26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [26, 33], "resource": "jobs(security-audit).steps[2](\ud83d\udc33 Pull Station DevOps Container)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}}, "code_block": [[32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [32, 63], "resource": "jobs(security-audit).steps[3](\ud83d\udd0d Run Security Scanner Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}}, "code_block": [[62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [62, 93], "resource": "jobs(security-audit).steps[4](\ud83c\udfd7\ufe0f Run Terraform Auditor Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}}, "code_block": [[92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [92, 124], "resource": "jobs(security-audit).steps[5](\ud83d\udcca Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}}, "code_block": [[123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [123, 180], "resource": "jobs(security-audit).steps[6](\ud83d\udcac Comment PR with Detailed Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}}, "code_block": [[179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [179, 189], "resource": "jobs(security-audit).steps[7](\ud83d\udcc1 Upload Detailed Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}}, "code_block": [[23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [23, 27], "resource": "jobs(security-audit).steps[1](\ud83d\udce5 Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}}, "code_block": [[26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [26, 33], "resource": "jobs(security-audit).steps[2](\ud83d\udc33 Pull Station DevOps Container)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}}, "code_block": [[32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [32, 63], "resource": "jobs(security-audit).steps[3](\ud83d\udd0d Run Security Scanner Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}}, "code_block": [[62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [62, 93], "resource": "jobs(security-audit).steps[4](\ud83c\udfd7\ufe0f Run Terraform Auditor Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}}, "code_block": [[92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [92, 124], "resource": "jobs(security-audit).steps[5](\ud83d\udcca Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}}, "code_block": [[123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [123, 180], "resource": "jobs(security-audit).steps[6](\ud83d\udcac Comment PR with Detailed Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}}, "code_block": [[179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [179, 189], "resource": "jobs(security-audit).steps[7](\ud83d\udcc1 Upload Detailed Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}}, "code_block": [[23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [23, 27], "resource": "jobs(security-audit).steps[1](\ud83d\udce5 Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}}, "code_block": [[26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [26, 33], "resource": "jobs(security-audit).steps[2](\ud83d\udc33 Pull Station DevOps Container)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}}, "code_block": [[32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [32, 63], "resource": "jobs(security-audit).steps[3](\ud83d\udd0d Run Security Scanner Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}}, "code_block": [[62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [62, 93], "resource": "jobs(security-audit).steps[4](\ud83c\udfd7\ufe0f Run Terraform Auditor Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}}, "code_block": [[92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [92, 124], "resource": "jobs(security-audit).steps[5](\ud83d\udcca Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}}, "code_block": [[123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [123, 180], "resource": "jobs(security-audit).steps[6](\ud83d\udcac Comment PR with Detailed Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}}, "code_block": [[179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [179, 189], "resource": "jobs(security-audit).steps[7](\ud83d\udcc1 Upload Detailed Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udce5 Checkout Code", "uses": "actions/checkout@v4", "__startline__": 23, "__endline__": 26}}, "code_block": [[23, "    - name: \ud83d\udce5 Checkout Code\n"], [24, "      uses: actions/checkout@v4\n"], [25, "      \n"], [26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [23, 27], "resource": "jobs(security-audit).steps[1](\ud83d\udce5 Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udc33 Pull Station DevOps Container", "run": "# Pull the pre-built Station DevOps container with all security tools\ndocker pull epuerta18/station-devops-simple:latest\necho \"Successfully pulled Station DevOps container with 28 security tools\"\n", "__startline__": 26, "__endline__": 32}}, "code_block": [[26, "    - name: \ud83d\udc33 Pull Station DevOps Container\n"], [27, "      run: |\n"], [28, "        # Pull the pre-built Station DevOps container with all security tools\n"], [29, "        docker pull epuerta18/station-devops-simple:latest\n"], [30, "        echo \"Successfully pulled Station DevOps container with 28 security tools\"\n"], [31, "        \n"], [32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [26, 33], "resource": "jobs(security-audit).steps[2](\ud83d\udc33 Pull Station DevOps Container)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udd0d Run Security Scanner Agent", "id": "security-scan", "run": "echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section  \necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\necho \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat security-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\necho \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat security-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": false, "__startline__": 32, "__endline__": 62}}, "code_block": [[32, "    - name: \ud83d\udd0d Run Security Scanner Agent\n"], [33, "      id: security-scan\n"], [34, "      run: |\n"], [35, "        echo \"=== Running Security Scanner Agent with Station ===\" | tee -a results.log\n"], [36, "        \n"], [37, "        RESULT=$(docker run --rm \\\n"], [38, "          -v ${{ github.workspace }}:/workspace \\\n"], [39, "          -w /workspace \\\n"], [40, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [41, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [42, "          epuerta18/station-devops-simple:latest \\\n"], [43, "          bash -c \"\n"], [44, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [45, "            stn sync default -i=false && \\\n"], [46, "            stn agent run 'Security Scanner' 'Use __list_directory with path \\\"/workspace\\\" to see files, then use __gitleaks_dir with path \\\"/workspace\\\" to scan for secrets.' --env default\n"], [47, "          \" | tee -a results.log)\n"], [48, "        \n"], [49, "        # Extract the structured result section  \n"], [50, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > security-results.txt\n"], [51, "        echo \"SECURITY_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [52, "        cat security-results.txt >> $GITHUB_OUTPUT\n"], [53, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [54, "        \n"], [55, "        # Extract just the agent's analysis\n"], [56, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > security-analysis.txt\n"], [57, "        echo \"SECURITY_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [58, "        cat security-analysis.txt >> $GITHUB_OUTPUT\n"], [59, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [60, "      continue-on-error: false\n"], [61, "      \n"], [62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [32, 63], "resource": "jobs(security-audit).steps[3](\ud83d\udd0d Run Security Scanner Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83c\udfd7\ufe0f Run Terraform Auditor Agent", "id": "terraform-scan", "run": "echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n\nRESULT=$(docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -w /workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  epuerta18/station-devops-simple:latest \\\n  bash -c \"\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default -i=false && \\\n    stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n  \" | tee -a results.log)\n\n# Extract the structured result section\necho \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\necho \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-results.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n\n# Extract just the agent's analysis\necho \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\necho \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\ncat terraform-analysis.txt >> $GITHUB_OUTPUT\necho \"EOF\" >> $GITHUB_OUTPUT\n", "continue-on-error": true, "__startline__": 62, "__endline__": 92}}, "code_block": [[62, "    - name: \ud83c\udfd7\ufe0f Run Terraform Auditor Agent\n"], [63, "      id: terraform-scan\n"], [64, "      run: |\n"], [65, "        echo \"=== Running Terraform Auditor Agent with Station ===\" | tee -a results.log\n"], [66, "        \n"], [67, "        RESULT=$(docker run --rm \\\n"], [68, "          -v ${{ github.workspace }}:/workspace \\\n"], [69, "          -w /workspace \\\n"], [70, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [71, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [72, "          epuerta18/station-devops-simple:latest \\\n"], [73, "          bash -c \"\n"], [74, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [75, "            stn sync default -i=false && \\\n"], [76, "            stn agent run 'Terraform Auditor' 'Use __directory_tree with path \\\"/workspace\\\" to explore structure, then use __checkov_dir with path \\\"/workspace/terraform\\\" to scan Terraform files.' --env default\n"], [77, "          \" | tee -a results.log)\n"], [78, "        \n"], [79, "        # Extract the structured result section\n"], [80, "        echo \"$RESULT\" | sed -n '/\ud83d\udccb Execution Results/,/Token Usage:/p' > terraform-results.txt\n"], [81, "        echo \"TERRAFORM_RESULT<<EOF\" >> $GITHUB_OUTPUT\n"], [82, "        cat terraform-results.txt >> $GITHUB_OUTPUT\n"], [83, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [84, "        \n"], [85, "        # Extract just the agent's analysis\n"], [86, "        echo \"$RESULT\" | sed -n '/Result:/,/Token Usage:/p' | sed '1d;$d' > terraform-analysis.txt\n"], [87, "        echo \"TERRAFORM_ANALYSIS<<EOF\" >> $GITHUB_OUTPUT\n"], [88, "        cat terraform-analysis.txt >> $GITHUB_OUTPUT\n"], [89, "        echo \"EOF\" >> $GITHUB_OUTPUT\n"], [90, "      continue-on-error: true\n"], [91, "\n"], [92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [62, 93], "resource": "jobs(security-audit).steps[4](\ud83c\udfd7\ufe0f Run Terraform Auditor Agent)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcca Generate Security Report Summary", "run": "echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\necho \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\necho \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\necho \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \necho '```' >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\necho \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\necho \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 92, "__endline__": 123}}, "code_block": [[92, "    - name: \ud83d\udcca Generate Security Report Summary\n"], [93, "      run: |\n"], [94, "        echo \"# \ud83d\udee1\ufe0f Station DevOps Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"## \ud83d\udcca Execution Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [97, "        echo \"- **Repository**: \\`${{ github.repository }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **Commit**: \\`${{ github.sha }}\\`\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"- **Triggered by**: ${{ github.event_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> $GITHUB_STEP_SUMMARY\n"], [101, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [102, "        \n"], [103, "        echo \"## \ud83d\udd0d Security Scans Completed\" >> $GITHUB_STEP_SUMMARY\n"], [104, "        echo \"### \ud83d\udd12 Security Scanner Results\" >> $GITHUB_STEP_SUMMARY\n"], [105, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [106, "        echo \"${{ steps.security-scan.outputs.SECURITY_RESULT }}\" >> $GITHUB_STEP_SUMMARY\n"], [107, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [108, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [109, "        \n"], [110, "        echo \"### \ud83c\udfd7\ufe0f Terraform Auditor Results\" >> $GITHUB_STEP_SUMMARY\n"], [111, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [112, "        echo \"${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}\" >> $GITHUB_STEP_SUMMARY  \n"], [113, "        echo '```' >> $GITHUB_STEP_SUMMARY\n"], [114, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [115, "        \n"], [116, "        echo \"## \ud83d\udee0\ufe0f Tools Used\" >> $GITHUB_STEP_SUMMARY\n"], [117, "        echo \"- **gitleaks**: Secret detection (4 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [118, "        echo \"- **checkov**: Infrastructure security (10 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [119, "        echo \"- **filesystem**: Code analysis (14 tools)\" >> $GITHUB_STEP_SUMMARY\n"], [120, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [121, "        echo \"_Powered by [Station DevOps Platform](https://station.dev) \ud83d\ude80_\" >> $GITHUB_STEP_SUMMARY\n"], [122, "        \n"], [123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [92, 124], "resource": "jobs(security-audit).steps[5](\ud83d\udcca Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcac Comment PR with Detailed Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\nconst securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\nconst terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\nconst terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n\nconst comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n\n**Automated security analysis has been completed for this PR using Station DevOps agents.**\n\n### \ud83d\udd12 Security Scanner Results\n\\`\\`\\`\n${securityResult}\n\\`\\`\\`\n\n**Security Analysis:**\n${securityAnalysis}\n\n---\n\n### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n\\`\\`\\`\n${terraformResult}\n\\`\\`\\`\n\n**Terraform Analysis:**\n${terraformAnalysis}\n\n---\n\n### \ud83d\udd27 Tools Used\n- **Secret Detection**: gitleaks for exposed credentials\n- **Infrastructure Security**: checkov for Terraform analysis  \n- **Total Tools**: 28 security and analysis tools\n\n### \ud83d\udcca Summary\nThis automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n- \ud83d\udd0d Exposed secrets and API keys\n- \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n- \ud83d\udccb Security best practices compliance\n\n**Review the detailed findings above and address any critical or high-priority issues before merging.**\n\n_Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n});\n", "__startline__": 127, "__endline__": 179}, "__startline__": 123, "__endline__": 179}}, "code_block": [[123, "    - name: \ud83d\udcac Comment PR with Detailed Results\n"], [124, "      if: github.event_name == 'pull_request'\n"], [125, "      uses: actions/github-script@v7\n"], [126, "      with:\n"], [127, "        script: |\n"], [128, "          const securityResult = `${{ steps.security-scan.outputs.SECURITY_RESULT }}`;\n"], [129, "          const securityAnalysis = `${{ steps.security-scan.outputs.SECURITY_ANALYSIS }}`;\n"], [130, "          const terraformResult = `${{ steps.terraform-scan.outputs.TERRAFORM_RESULT }}`;\n"], [131, "          const terraformAnalysis = `${{ steps.terraform-scan.outputs.TERRAFORM_ANALYSIS }}`;\n"], [132, "          \n"], [133, "          const comment = `## \ud83d\udee1\ufe0f Station DevOps Security Audit Complete\n"], [134, "          \n"], [135, "          **Automated security analysis has been completed for this PR using Station DevOps agents.**\n"], [136, "          \n"], [137, "          ### \ud83d\udd12 Security Scanner Results\n"], [138, "          \\`\\`\\`\n"], [139, "          ${securityResult}\n"], [140, "          \\`\\`\\`\n"], [141, "          \n"], [142, "          **Security Analysis:**\n"], [143, "          ${securityAnalysis}\n"], [144, "          \n"], [145, "          ---\n"], [146, "          \n"], [147, "          ### \ud83c\udfd7\ufe0f Terraform Security Auditor Results  \n"], [148, "          \\`\\`\\`\n"], [149, "          ${terraformResult}\n"], [150, "          \\`\\`\\`\n"], [151, "          \n"], [152, "          **Terraform Analysis:**\n"], [153, "          ${terraformAnalysis}\n"], [154, "          \n"], [155, "          ---\n"], [156, "          \n"], [157, "          ### \ud83d\udd27 Tools Used\n"], [158, "          - **Secret Detection**: gitleaks for exposed credentials\n"], [159, "          - **Infrastructure Security**: checkov for Terraform analysis  \n"], [160, "          - **Total Tools**: 28 security and analysis tools\n"], [161, "          \n"], [162, "          ### \ud83d\udcca Summary\n"], [163, "          This automated security audit was performed using [Station DevOps Platform](https://station.dev) with Ship CLI security tools. The agents analyzed your code for:\n"], [164, "          - \ud83d\udd0d Exposed secrets and API keys\n"], [165, "          - \ud83c\udfd7\ufe0f Infrastructure security misconfigurations\n"], [166, "          - \ud83d\udccb Security best practices compliance\n"], [167, "          \n"], [168, "          **Review the detailed findings above and address any critical or high-priority issues before merging.**\n"], [169, "          \n"], [170, "          _Automated by Station DevOps Security Platform_ \ud83d\ude80`;\n"], [171, "          \n"], [172, "          github.rest.issues.createComment({\n"], [173, "            issue_number: context.issue.number,\n"], [174, "            owner: context.repo.owner,\n"], [175, "            repo: context.repo.repo,\n"], [176, "            body: comment\n"], [177, "          });\n"], [178, "\n"], [179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [123, 180], "resource": "jobs(security-audit).steps[6](\ud83d\udcac Comment PR with Detailed Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "\ud83d\udcc1 Upload Detailed Results", "uses": "actions/upload-artifact@v4", "with": {"name": "security-audit-results", "path": "results.log\nsecurity-results.txt\nsecurity-analysis.txt  \nterraform-results.txt\nterraform-analysis.txt", "__startline__": 182, "__endline__": 188}, "__startline__": 179, "__endline__": 188}}, "code_block": [[179, "    - name: \ud83d\udcc1 Upload Detailed Results\n"], [180, "      uses: actions/upload-artifact@v4\n"], [181, "      with:\n"], [182, "        name: security-audit-results\n"], [183, "        path: |\n"], [184, "          results.log\n"], [185, "          security-results.txt\n"], [186, "          security-analysis.txt  \n"], [187, "          terraform-results.txt\n"], [188, "          terraform-analysis.txt"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [179, 189], "resource": "jobs(security-audit).steps[7](\ud83d\udcc1 Upload Detailed Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": ["security-audit"], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV_GHA_5", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sign execution in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-scan": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}], "__startline__": 12, "__endline__": 71}, "__startline__": 11, "__endline__": 71}}, "code_block": [[11, "  security-scan:\n"], [12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [11, 72], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignArtifacts", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}], "__startline__": 12, "__endline__": 71}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [12, 72], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_6", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sbom attestation in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"security-scan": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}], "__startline__": 12, "__endline__": 71}, "__startline__": 11, "__endline__": 71}}, "code_block": [[11, "  security-scan:\n"], [12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [11, 72], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignSBOM", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}], "__startline__": 12, "__endline__": 71}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [12, 72], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}], "__startline__": 12, "__endline__": 71}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [12, 72], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}, {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}], "__startline__": 12, "__endline__": 71}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [12, 72], "resource": "jobs(security-scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_7", "bc_check_id": null, "check_name": "The build output cannot be affected by user parameters other than the build entry point and the top-level source location. GitHub Actions workflow_dispatch inputs MUST be empty. ", "check_result": {"result": "PASSED", "results_configuration": {"push": {"branches": ["main", "develop"], "__startline__": 5, "__endline__": 6}, "pull_request": {"branches": ["main"], "__startline__": 7, "__endline__": 8}, "workflow_dispatch": null, "__startline__": 4, "__endline__": 10}}, "code_block": [[4, "  push:\n"], [5, "    branches: [ main, develop ]\n"], [6, "  pull_request:\n"], [7, "    branches: [ main ]\n"], [8, "  workflow_dispatch:\n"], [9, "\n"], [10, "jobs:\n"], [11, "  security-scan:\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [4, 11], "resource": "on(Station Security Scan)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.EmptyWorkflowDispatch", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": [""], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [15, 19], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}}, "code_block": [[18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [18, 30], "resource": "jobs(security-scan).steps[2](Run Station Security Scanner)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}}, "code_block": [[29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [29, 48], "resource": "jobs(security-scan).steps[3](Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}}, "code_block": [[47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [47, 72], "resource": "jobs(security-scan).steps[4](Comment PR with Security Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [15, 19], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}}, "code_block": [[18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [18, 30], "resource": "jobs(security-scan).steps[2](Run Station Security Scanner)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}}, "code_block": [[29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [29, 48], "resource": "jobs(security-scan).steps[3](Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}}, "code_block": [[47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [47, 72], "resource": "jobs(security-scan).steps[4](Comment PR with Security Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [15, 19], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}}, "code_block": [[18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [18, 30], "resource": "jobs(security-scan).steps[2](Run Station Security Scanner)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}}, "code_block": [[29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [29, 48], "resource": "jobs(security-scan).steps[3](Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}}, "code_block": [[47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [47, 72], "resource": "jobs(security-scan).steps[4](Comment PR with Security Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [15, 19], "resource": "jobs(security-scan).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Station Security Scanner", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e PROJECT_ROOT=/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  station-cicd-security-demo:latest \\\n  stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n", "continue-on-error": true, "__startline__": 18, "__endline__": 29}}, "code_block": [[18, "    - name: Run Station Security Scanner\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -v /var/run/docker.sock:/var/run/docker.sock \\\n"], [23, "          -e PROJECT_ROOT=/workspace \\\n"], [24, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [25, "          station-cicd-security-demo:latest \\\n"], [26, "          stn agent run \"CICD Security Scanner\" \"Perform comprehensive security analysis of this project: scan terraform files for misconfigurations, docker files for vulnerabilities, and Python code for security issues. Focus on critical and high severity findings.\"\n"], [27, "      continue-on-error: true\n"], [28, "    \n"], [29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [18, 30], "resource": "jobs(security-scan).steps[2](Run Station Security Scanner)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Security Report Summary", "run": "echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\necho \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \necho \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 29, "__endline__": 47}}, "code_block": [[29, "    - name: Generate Security Report Summary\n"], [30, "      run: |\n"], [31, "        echo \"# \ud83d\udd12 Station Security Scan Results\" >> $GITHUB_STEP_SUMMARY\n"], [32, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [33, "        echo \"**Repository:** ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [34, "        echo \"**Branch:** ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n"], [35, "        echo \"**Commit:** ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [36, "        echo \"**Scan Date:** $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [37, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [38, "        echo \"## Analysis Completed:\" >> $GITHUB_STEP_SUMMARY\n"], [39, "        echo \"- \u2705 **Terraform Security**: Infrastructure misconfigurations and compliance\" >> $GITHUB_STEP_SUMMARY\n"], [40, "        echo \"- \u2705 **Container Security**: Docker vulnerabilities and best practices\" >> $GITHUB_STEP_SUMMARY  \n"], [41, "        echo \"- \u2705 **Code Security**: Python vulnerabilities and secret detection\" >> $GITHUB_STEP_SUMMARY\n"], [42, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [43, "        echo \"See workflow logs above for detailed findings and remediation guidance.\" >> $GITHUB_STEP_SUMMARY\n"], [44, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [45, "        echo \"_\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) AI Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [46, "\n"], [47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [29, 48], "resource": "jobs(security-scan).steps[3](Generate Security Report Summary)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 Station Security Analysis Results\n  \n  Our AI-powered security scanner has analyzed this pull request:\n  \n  **Scanned Components:**\n  - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n  - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n  - \ud83d\udc0d **Python Code** - Source code security and secret detection\n  \n  **Next Steps:**\n  1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n  2. Address any CRITICAL or HIGH severity issues before merging\n  3. Follow the provided remediation guidance for each finding\n  \n  _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n})", "__startline__": 51, "__endline__": 71}, "__startline__": 47, "__endline__": 71}}, "code_block": [[47, "    - name: Comment PR with Security Results\n"], [48, "      if: github.event_name == 'pull_request'\n"], [49, "      uses: actions/github-script@v7\n"], [50, "      with:\n"], [51, "        script: |\n"], [52, "          github.rest.issues.createComment({\n"], [53, "            issue_number: context.issue.number,\n"], [54, "            owner: context.repo.owner,\n"], [55, "            repo: context.repo.repo,\n"], [56, "            body: `## \ud83d\udd12 Station Security Analysis Results\n"], [57, "            \n"], [58, "            Our AI-powered security scanner has analyzed this pull request:\n"], [59, "            \n"], [60, "            **Scanned Components:**\n"], [61, "            - \ud83c\udfd7\ufe0f **Terraform Configuration** - Infrastructure security and compliance\n"], [62, "            - \ud83d\udc33 **Docker Images** - Container vulnerabilities and best practices  \n"], [63, "            - \ud83d\udc0d **Python Code** - Source code security and secret detection\n"], [64, "            \n"], [65, "            **Next Steps:**\n"], [66, "            1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed findings\n"], [67, "            2. Address any CRITICAL or HIGH severity issues before merging\n"], [68, "            3. Follow the provided remediation guidance for each finding\n"], [69, "            \n"], [70, "            _\ud83e\udd16 Powered by [Station](https://github.com/cloudshipai/station) Security Agents_`\n"], [71, "          })"]], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [47, 72], "resource": "jobs(security-scan).steps[4](Comment PR with Security Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["security-scan"], "workflow_name": "Station Security Scan"}, {"check_id": "CKV_GHA_5", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sign execution in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"comprehensive-audit": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}, {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}, {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}, {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}, {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}], "__startline__": 12, "__endline__": 130}, "__startline__": 11, "__endline__": 130}}, "code_block": [[11, "  comprehensive-audit:\n"], [12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [11, 131], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignArtifacts", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}, {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}, {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}, {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}, {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}], "__startline__": 12, "__endline__": 130}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [12, 131], "resource": "jobs(comprehensive-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_6", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sbom attestation in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"comprehensive-audit": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}, {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}, {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}, {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}, {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}], "__startline__": 12, "__endline__": 130}, "__startline__": 11, "__endline__": 130}}, "code_block": [[11, "  comprehensive-audit:\n"], [12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [11, 131], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignSBOM", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}, {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}, {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}, {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}, {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}], "__startline__": 12, "__endline__": 130}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [12, 131], "resource": "jobs(comprehensive-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}, {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}, {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}, {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}, {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}], "__startline__": 12, "__endline__": 130}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [12, 131], "resource": "jobs(comprehensive-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}, {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}, {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}, {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}, {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}, {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}, {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}], "__startline__": 12, "__endline__": 130}}, "code_block": [[12, "    runs-on: ubuntu-latest\n"], [13, "    \n"], [14, "    steps:\n"], [15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [12, 131], "resource": "jobs(comprehensive-audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_7", "bc_check_id": null, "check_name": "The build output cannot be affected by user parameters other than the build entry point and the top-level source location. GitHub Actions workflow_dispatch inputs MUST be empty. ", "check_result": {"result": "PASSED", "results_configuration": {"push": {"branches": ["main"], "__startline__": 5, "__endline__": 6}, "pull_request": {"branches": ["main"], "__startline__": 7, "__endline__": 8}, "workflow_dispatch": null, "__startline__": 4, "__endline__": 10}}, "code_block": [[4, "  push:\n"], [5, "    branches: [ main ]\n"], [6, "  pull_request:\n"], [7, "    branches: [ main ]\n"], [8, "  workflow_dispatch:\n"], [9, "\n"], [10, "jobs:\n"], [11, "  comprehensive-audit:\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [4, 11], "resource": "on(DevOps CICD Pipeline Audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.EmptyWorkflowDispatch", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": [""], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [15, 19], "resource": "jobs(comprehensive-audit).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}}, "code_block": [[18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [18, 34], "resource": "jobs(comprehensive-audit).steps[2](Run DevOps CICD Pipeline Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}}, "code_block": [[33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [33, 49], "resource": "jobs(comprehensive-audit).steps[3](Run Infrastructure Code Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}}, "code_block": [[48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [48, 64], "resource": "jobs(comprehensive-audit).steps[4](Run Supply Chain Security Analysis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}}, "code_block": [[63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [63, 79], "resource": "jobs(comprehensive-audit).steps[5](Run GitHub Actions Security Review)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}}, "code_block": [[78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [78, 103], "resource": "jobs(comprehensive-audit).steps[6](Generate Comprehensive Security Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}}, "code_block": [[102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [102, 131], "resource": "jobs(comprehensive-audit).steps[7](Comment PR with Security Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [15, 19], "resource": "jobs(comprehensive-audit).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}}, "code_block": [[18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [18, 34], "resource": "jobs(comprehensive-audit).steps[2](Run DevOps CICD Pipeline Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}}, "code_block": [[33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [33, 49], "resource": "jobs(comprehensive-audit).steps[3](Run Infrastructure Code Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}}, "code_block": [[48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [48, 64], "resource": "jobs(comprehensive-audit).steps[4](Run Supply Chain Security Analysis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}}, "code_block": [[63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [63, 79], "resource": "jobs(comprehensive-audit).steps[5](Run GitHub Actions Security Review)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}}, "code_block": [[78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [78, 103], "resource": "jobs(comprehensive-audit).steps[6](Generate Comprehensive Security Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}}, "code_block": [[102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [102, 131], "resource": "jobs(comprehensive-audit).steps[7](Comment PR with Security Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [15, 19], "resource": "jobs(comprehensive-audit).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}}, "code_block": [[18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [18, 34], "resource": "jobs(comprehensive-audit).steps[2](Run DevOps CICD Pipeline Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}}, "code_block": [[33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [33, 49], "resource": "jobs(comprehensive-audit).steps[3](Run Infrastructure Code Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}}, "code_block": [[48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [48, 64], "resource": "jobs(comprehensive-audit).steps[4](Run Supply Chain Security Analysis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}}, "code_block": [[63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [63, 79], "resource": "jobs(comprehensive-audit).steps[5](Run GitHub Actions Security Review)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}}, "code_block": [[78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [78, 103], "resource": "jobs(comprehensive-audit).steps[6](Generate Comprehensive Security Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}}, "code_block": [[102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [102, 131], "resource": "jobs(comprehensive-audit).steps[7](Comment PR with Security Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 15, "__endline__": 18}}, "code_block": [[15, "    - name: Checkout Code\n"], [16, "      uses: actions/checkout@v4\n"], [17, "      \n"], [18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [15, 19], "resource": "jobs(comprehensive-audit).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run DevOps CICD Pipeline Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n  \"\n", "continue-on-error": false, "__startline__": 18, "__endline__": 33}}, "code_block": [[18, "    - name: Run DevOps CICD Pipeline Auditor\n"], [19, "      run: |\n"], [20, "        docker run --rm \\\n"], [21, "          -v ${{ github.workspace }}:/workspace \\\n"], [22, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [23, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [24, "          station-devops-cicd:latest \\\n"], [25, "          bash -c \"\n"], [26, "            mkdir -p /root/.config/station/environments/default && \\\n"], [27, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [28, "            stn sync default && \\\n"], [29, "            stn agent run 'DevOps CICD Pipeline Auditor' 'Perform comprehensive CICD security audit: 1) Scan for secrets with gitleaks and git-secrets 2) Analyze container security with trivy and hadolint 3) Check GitHub Actions with actionlint 4) Examine infrastructure with terraform tools 5) Generate SBOM and check supply chain with syft 6) Provide actionable security recommendations' --env default\n"], [30, "          \"\n"], [31, "      continue-on-error: false\n"], [32, "    \n"], [33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [18, 34], "resource": "jobs(comprehensive-audit).steps[2](Run DevOps CICD Pipeline Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Infrastructure Code Auditor", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n  \"\n", "continue-on-error": true, "__startline__": 33, "__endline__": 48}}, "code_block": [[33, "    - name: Run Infrastructure Code Auditor  \n"], [34, "      run: |\n"], [35, "        docker run --rm \\\n"], [36, "          -v ${{ github.workspace }}:/workspace \\\n"], [37, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [38, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [39, "          station-devops-cicd:latest \\\n"], [40, "          bash -c \"\n"], [41, "            mkdir -p /root/.config/station/environments/default && \\\n"], [42, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [43, "            stn sync default && \\\n"], [44, "            stn agent run 'Infrastructure Code Auditor' 'Analyze terraform configurations: 1) Run security scans with checkov and terrascan 2) Perform cost analysis with infracost 3) Generate documentation with terraform-docs 4) Check best practices with tflint 5) Create infrastructure diagrams if possible' --env default\n"], [45, "          \"\n"], [46, "      continue-on-error: true\n"], [47, "\n"], [48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [33, 49], "resource": "jobs(comprehensive-audit).steps[3](Run Infrastructure Code Auditor)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run Supply Chain Security Analysis", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n  \"\n", "continue-on-error": true, "__startline__": 48, "__endline__": 63}}, "code_block": [[48, "    - name: Run Supply Chain Security Analysis\n"], [49, "      run: |\n"], [50, "        docker run --rm \\\n"], [51, "          -v ${{ github.workspace }}:/workspace \\\n"], [52, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [53, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [54, "          station-devops-cicd:latest \\\n"], [55, "          bash -c \"\n"], [56, "            mkdir -p /root/.config/station/environments/default && \\\n"], [57, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [58, "            stn sync default && \\\n"], [59, "            stn agent run 'Supply Chain Security Analyst' 'Analyze supply chain security: 1) Generate SBOM with syft 2) Check for vulnerabilities with osv-scanner 3) Analyze licenses with license-detector 4) Check for dependency risks 5) Verify artifact integrity if possible' --env default  \n"], [60, "          \"\n"], [61, "      continue-on-error: true\n"], [62, "\n"], [63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [48, 64], "resource": "jobs(comprehensive-audit).steps[4](Run Supply Chain Security Analysis)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Run GitHub Actions Security Review", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n  -e PROJECT_ROOT=\"/workspace\" \\\n  station-devops-cicd:latest \\\n  bash -c \"\n    mkdir -p /root/.config/station/environments/default && \\\n    echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n    stn sync default && \\\n    stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n  \"\n", "continue-on-error": true, "__startline__": 63, "__endline__": 78}}, "code_block": [[63, "    - name: Run GitHub Actions Security Review\n"], [64, "      run: |\n"], [65, "        docker run --rm \\\n"], [66, "          -v ${{ github.workspace }}:/workspace \\\n"], [67, "          -e OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY }}\" \\\n"], [68, "          -e PROJECT_ROOT=\"/workspace\" \\\n"], [69, "          station-devops-cicd:latest \\\n"], [70, "          bash -c \"\n"], [71, "            mkdir -p /root/.config/station/environments/default && \\\n"], [72, "            echo 'PROJECT_ROOT: /workspace' > /root/.config/station/environments/default/variables.yml && \\\n"], [73, "            stn sync default && \\\n"], [74, "            stn agent run 'GitHub Actions Security Reviewer' 'Review GitHub Actions security: 1) Lint workflows with actionlint 2) Analyze permissions and secrets usage 3) Check for injection vulnerabilities 4) Review third-party actions security 5) Provide security hardening recommendations' --env default\n"], [75, "          \"\n"], [76, "      continue-on-error: true\n"], [77, "\n"], [78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [63, 79], "resource": "jobs(comprehensive-audit).steps[5](Run GitHub Actions Security Review)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Comprehensive Security Report", "run": "echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \necho \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\necho \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\necho \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\necho \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\necho \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n", "__startline__": 78, "__endline__": 102}}, "code_block": [[78, "    - name: Generate Comprehensive Security Report\n"], [79, "      run: |\n"], [80, "        echo \"# \ud83d\udee1\ufe0f DevOps CICD Security Audit Results\" >> $GITHUB_STEP_SUMMARY\n"], [81, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [82, "        echo \"## \ud83d\udcca Audit Summary\" >> $GITHUB_STEP_SUMMARY  \n"], [83, "        echo \"- **Repository**: ${{ github.repository }}\" >> $GITHUB_STEP_SUMMARY\n"], [84, "        echo \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\n"], [85, "        echo \"- **Audit Date**: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [86, "        echo \"- **Container**: station-devops-cicd:latest\" >> $GITHUB_STEP_SUMMARY\n"], [87, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [88, "        echo \"## \ud83d\udd0d Security Audits Performed\" >> $GITHUB_STEP_SUMMARY\n"], [89, "        echo \"\u2705 **Comprehensive Pipeline Audit**: Full security, infrastructure, and supply chain analysis\" >> $GITHUB_STEP_SUMMARY\n"], [90, "        echo \"\u2705 **Infrastructure Code Review**: Terraform security scanning and cost analysis\" >> $GITHUB_STEP_SUMMARY  \n"], [91, "        echo \"\u2705 **Supply Chain Analysis**: SBOM generation and dependency vulnerability scanning\" >> $GITHUB_STEP_SUMMARY\n"], [92, "        echo \"\u2705 **GitHub Actions Security**: Workflow security analysis and hardening recommendations\" >> $GITHUB_STEP_SUMMARY\n"], [93, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [94, "        echo \"## \ud83d\udee0\ufe0f Tools Utilized\" >> $GITHUB_STEP_SUMMARY\n"], [95, "        echo \"- **Security**: gitleaks, git-secrets, trivy, semgrep, checkov, terrascan, hadolint\" >> $GITHUB_STEP_SUMMARY\n"], [96, "        echo \"- **Infrastructure**: tflint, terraform-docs, infracost, inframap\" >> $GITHUB_STEP_SUMMARY\n"], [97, "        echo \"- **Supply Chain**: syft, osv-scanner, license-detector, cosign\" >> $GITHUB_STEP_SUMMARY\n"], [98, "        echo \"- **CI/CD**: actionlint, GitHub Actions security analysis\" >> $GITHUB_STEP_SUMMARY\n"], [99, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [100, "        echo \"_Powered by [Station](https://station.dev) DevOps Security Agents_\" >> $GITHUB_STEP_SUMMARY\n"], [101, "\n"], [102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [78, 103], "resource": "jobs(comprehensive-audit).steps[6](Generate Comprehensive Security Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Comment PR with Security Results", "if": "github.event_name == 'pull_request'", "uses": "actions/github-script@v7", "with": {"script": "github.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: `## \ud83d\udd12 DevOps Security Audit Complete\n  \n  Station DevOps agents have completed comprehensive security analysis:\n  \n  ### \ud83d\udee1\ufe0f Security Audits Performed:\n  - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n  - **Infrastructure Security**: Terraform code security scanning and analysis  \n  - **Supply Chain Security**: SBOM generation and dependency risk assessment\n  - **GitHub Actions Security**: Workflow security analysis and recommendations\n  \n  ### \ud83d\udee0\ufe0f Security Tools Used:\n  - Secret scanning, vulnerability analysis, container security\n  - Infrastructure as code security validation\n  - Supply chain integrity verification\n  - CI/CD security best practices validation\n  \n  **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n  \n  _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n})", "__startline__": 106, "__endline__": 130}, "__startline__": 102, "__endline__": 130}}, "code_block": [[102, "    - name: Comment PR with Security Results\n"], [103, "      if: github.event_name == 'pull_request'\n"], [104, "      uses: actions/github-script@v7\n"], [105, "      with:\n"], [106, "        script: |\n"], [107, "          github.rest.issues.createComment({\n"], [108, "            issue_number: context.issue.number,\n"], [109, "            owner: context.repo.owner,\n"], [110, "            repo: context.repo.repo,\n"], [111, "            body: `## \ud83d\udd12 DevOps Security Audit Complete\n"], [112, "            \n"], [113, "            Station DevOps agents have completed comprehensive security analysis:\n"], [114, "            \n"], [115, "            ### \ud83d\udee1\ufe0f Security Audits Performed:\n"], [116, "            - **Pipeline Security Audit**: Full CICD pipeline vulnerability assessment\n"], [117, "            - **Infrastructure Security**: Terraform code security scanning and analysis  \n"], [118, "            - **Supply Chain Security**: SBOM generation and dependency risk assessment\n"], [119, "            - **GitHub Actions Security**: Workflow security analysis and recommendations\n"], [120, "            \n"], [121, "            ### \ud83d\udee0\ufe0f Security Tools Used:\n"], [122, "            - Secret scanning, vulnerability analysis, container security\n"], [123, "            - Infrastructure as code security validation\n"], [124, "            - Supply chain integrity verification\n"], [125, "            - CI/CD security best practices validation\n"], [126, "            \n"], [127, "            **Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed security findings.**\n"], [128, "            \n"], [129, "            _Automated by [Station DevOps Security Platform](https://station.dev)_ \ud83d\ude80`\n"], [130, "          })"]], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [102, 131], "resource": "jobs(comprehensive-audit).steps[7](Comment PR with Security Results)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": ["comprehensive-audit"], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV_GHA_5", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sign execution in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"basic-test": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}, {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}, {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}, {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}], "__startline__": 11, "__endline__": 56}, "__startline__": 10, "__endline__": 56}}, "code_block": [[10, "  basic-test:\n"], [11, "    runs-on: ubuntu-latest\n"], [12, "    \n"], [13, "    steps:\n"], [14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [10, 57], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignArtifacts", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}, {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}, {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}, {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}], "__startline__": 11, "__endline__": 56}}, "code_block": [[11, "    runs-on: ubuntu-latest\n"], [12, "    \n"], [13, "    steps:\n"], [14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [11, 57], "resource": "jobs(basic-test)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_6", "bc_check_id": null, "check_name": "Found artifact build without evidence of cosign sbom attestation in pipeline", "check_result": {"result": "PASSED", "results_configuration": {"basic-test": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}, {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}, {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}, {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}], "__startline__": 11, "__endline__": 56}, "__startline__": 10, "__endline__": 56}}, "code_block": [[10, "  basic-test:\n"], [11, "    runs-on: ubuntu-latest\n"], [12, "    \n"], [13, "    steps:\n"], [14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [10, 57], "resource": "jobs", "evaluations": null, "check_class": "checkov.github_actions.checks.job.CosignSBOM", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}, {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}, {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}, {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}], "__startline__": 11, "__endline__": 56}}, "code_block": [[11, "    runs-on: ubuntu-latest\n"], [12, "    \n"], [13, "    steps:\n"], [14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [11, 57], "resource": "jobs(basic-test)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}, {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}, {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}, {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}], "__startline__": 11, "__endline__": 56}}, "code_block": [[11, "    runs-on: ubuntu-latest\n"], [12, "    \n"], [13, "    steps:\n"], [14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [11, 57], "resource": "jobs(basic-test)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"runs-on": "ubuntu-latest", "steps": [{"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}, {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}, {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}, {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}], "__startline__": 11, "__endline__": 56}}, "code_block": [[11, "    runs-on: ubuntu-latest\n"], [12, "    \n"], [13, "    steps:\n"], [14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [11, 57], "resource": "jobs(basic-test)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_7", "bc_check_id": null, "check_name": "The build output cannot be affected by user parameters other than the build entry point and the top-level source location. GitHub Actions workflow_dispatch inputs MUST be empty. ", "check_result": {"result": "PASSED", "results_configuration": {"push": {"branches": ["main"], "__startline__": 5, "__endline__": 6}, "pull_request": {"branches": ["main"], "__startline__": 7, "__endline__": 9}, "__startline__": 4, "__endline__": 9}}, "code_block": [[4, "  push:\n"], [5, "    branches: [ main ]\n"], [6, "  pull_request:\n"], [7, "    branches: [ main ]\n"], [8, "\n"], [9, "jobs:\n"], [10, "  basic-test:\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [4, 10], "resource": "on(Station Container Basic Test)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.EmptyWorkflowDispatch", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": [""], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}}, "code_block": [[14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [14, 18], "resource": "jobs(basic-test).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}}, "code_block": [[17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [17, 36], "resource": "jobs(basic-test).steps[2](Test Station Container Basic Functionality)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}}, "code_block": [[35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [35, 46], "resource": "jobs(basic-test).steps[3](Test Ship Tools Discovery)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_4", "bc_check_id": null, "check_name": "Suspicious use of netcat with IP address", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}}, "code_block": [[45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [45, 57], "resource": "jobs(basic-test).steps[4](Generate Test Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ReverseShellNetcat", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}}, "code_block": [[14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [14, 18], "resource": "jobs(basic-test).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}}, "code_block": [[17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [17, 36], "resource": "jobs(basic-test).steps[2](Test Station Container Basic Functionality)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}}, "code_block": [[35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [35, 46], "resource": "jobs(basic-test).steps[3](Test Ship Tools Discovery)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_2", "bc_check_id": null, "check_name": "Ensure run commands are not vulnerable to shell injection", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}}, "code_block": [[45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [45, 57], "resource": "jobs(basic-test).steps[4](Generate Test Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.ShellInjection", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}}, "code_block": [[14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [14, 18], "resource": "jobs(basic-test).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}}, "code_block": [[17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [17, 36], "resource": "jobs(basic-test).steps[2](Test Station Container Basic Functionality)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}}, "code_block": [[35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [35, 46], "resource": "jobs(basic-test).steps[3](Test Ship Tools Discovery)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_3", "bc_check_id": null, "check_name": "Suspicious use of curl with secrets", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}}, "code_block": [[45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [45, 57], "resource": "jobs(basic-test).steps[4](Generate Test Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.SuspectCurlInScript", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Checkout Code", "uses": "actions/checkout@v4", "__startline__": 14, "__endline__": 17}}, "code_block": [[14, "    - name: Checkout Code\n"], [15, "      uses: actions/checkout@v4\n"], [16, "      \n"], [17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [14, 18], "resource": "jobs(basic-test).steps[1](Checkout Code)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Test Station Container Basic Functionality", "run": "docker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Station CLI ===' && \\\n    stn --version && \\\n    echo '=== Testing Ship CLI ===' && \\\n    ship --help | head -5 && \\\n    echo '=== Testing Docker CLI ===' && \\\n    docker --version && \\\n    echo '=== Testing Dagger functionality ===' && \\\n    cd /workspace && \\\n    ls -la\n  \"\n", "continue-on-error": false, "__startline__": 17, "__endline__": 35}}, "code_block": [[17, "    - name: Test Station Container Basic Functionality\n"], [18, "      run: |\n"], [19, "        docker run --rm \\\n"], [20, "          -v ${{ github.workspace }}:/workspace \\\n"], [21, "          station-cicd-security-demo:latest \\\n"], [22, "          bash -c \"\n"], [23, "            echo '=== Testing Station CLI ===' && \\\n"], [24, "            stn --version && \\\n"], [25, "            echo '=== Testing Ship CLI ===' && \\\n"], [26, "            ship --help | head -5 && \\\n"], [27, "            echo '=== Testing Docker CLI ===' && \\\n"], [28, "            docker --version && \\\n"], [29, "            echo '=== Testing Dagger functionality ===' && \\\n"], [30, "            cd /workspace && \\\n"], [31, "            ls -la\n"], [32, "          \"\n"], [33, "      continue-on-error: false\n"], [34, "    \n"], [35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [17, 36], "resource": "jobs(basic-test).steps[2](Test Station Container Basic Functionality)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Test Ship Tools Discovery", "run": "docker run --rm \\\n  station-cicd-security-demo:latest \\\n  bash -c \"\n    echo '=== Testing Ship MCP Discovery ===' && \\\n    ship list-mcps | head -20\n  \"\n", "continue-on-error": true, "__startline__": 35, "__endline__": 45}}, "code_block": [[35, "    - name: Test Ship Tools Discovery\n"], [36, "      run: |\n"], [37, "        docker run --rm \\\n"], [38, "          station-cicd-security-demo:latest \\\n"], [39, "          bash -c \"\n"], [40, "            echo '=== Testing Ship MCP Discovery ===' && \\\n"], [41, "            ship list-mcps | head -20\n"], [42, "          \"\n"], [43, "      continue-on-error: true\n"], [44, "\n"], [45, "    - name: Generate Test Report\n"], [46, "      run: |\n"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [35, 46], "resource": "jobs(basic-test).steps[3](Test Ship Tools Discovery)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}, {"check_id": "CKV_GHA_1", "bc_check_id": null, "check_name": "Ensure ACTIONS_ALLOW_UNSECURE_COMMANDS isn't true on environment variables", "check_result": {"result": "PASSED", "results_configuration": {"name": "Generate Test Report", "run": "echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\necho \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\necho \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY", "__startline__": 45, "__endline__": 56}}, "code_block": [[45, "    - name: Generate Test Report\n"], [46, "      run: |\n"], [47, "        echo \"# Station Container Test Results\" >> $GITHUB_STEP_SUMMARY\n"], [48, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [49, "        echo \"## Container: station-cicd-security-demo:latest\" >> $GITHUB_STEP_SUMMARY\n"], [50, "        echo \"## Test Date: $(date)\" >> $GITHUB_STEP_SUMMARY\n"], [51, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [52, "        echo \"\u2705 Station CLI functional test complete\" >> $GITHUB_STEP_SUMMARY\n"], [53, "        echo \"\u2705 Ship CLI integration test complete\" >> $GITHUB_STEP_SUMMARY\n"], [54, "        echo \"\u2705 Docker CLI availability verified\" >> $GITHUB_STEP_SUMMARY\n"], [55, "        echo \"\" >> $GITHUB_STEP_SUMMARY\n"], [56, "        echo \"_Container successfully tested with GitHub Actions via act_\" >> $GITHUB_STEP_SUMMARY"]], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [45, 57], "resource": "jobs(basic-test).steps[4](Generate Test Report)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.AllowUnsecureCommandsOnJob", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": ["basic-test"], "workflow_name": "Station Container Basic Test"}], "failed_checks": [{"check_id": "CKV_GHA_7", "bc_check_id": null, "check_name": "The build output cannot be affected by user parameters other than the build entry point and the top-level source location. GitHub Actions workflow_dispatch inputs MUST be empty. ", "check_result": {"result": "FAILED", "results_configuration": {"environment": {"description": "Environment to test (leave empty for default)", "required": false, "default": "devops-simple", "type": "string", "__startline__": 7, "__endline__": 11}, "__startline__": 6, "__endline__": 11}}, "code_block": [[6, "      environment:\n"], [7, "        description: 'Environment to test (leave empty for default)'\n"], [8, "        required: false\n"], [9, "        default: 'devops-simple'\n"], [10, "        type: string\n"], [11, "  pull_request:\n"], [12, "    branches: [ main ]\n"]], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [6, 12], "resource": "on(\ud83d\udee1\ufe0f Station DevOps Security Audit)", "evaluations": null, "check_class": "checkov.github_actions.checks.job.EmptyWorkflowDispatch", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": [""], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV2_GHA_1", "bc_check_id": null, "check_name": "Ensure top-level permissions are not set to write-all", "check_result": {"result": "FAILED", "evaluated_keys": ["permissions"]}, "code_block": [], "file_path": "/.github/workflows/security-scan.yml", "file_abs_path": "/tf/.github/workflows/security-scan.yml", "repo_file_path": "/tf/.github/workflows/security-scan.yml", "file_line_range": [0, 1], "resource": "on(Security Scan with Station Agents)", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": [""], "workflow_name": "Security Scan with Station Agents"}, {"check_id": "CKV2_GHA_1", "bc_check_id": null, "check_name": "Ensure top-level permissions are not set to write-all", "check_result": {"result": "FAILED", "evaluated_keys": ["permissions"]}, "code_block": [], "file_path": "/.github/workflows/station-docker-scan.yml", "file_abs_path": "/tf/.github/workflows/station-docker-scan.yml", "repo_file_path": "/tf/.github/workflows/station-docker-scan.yml", "file_line_range": [0, 1], "resource": "on(Station Docker Container Security Scan)", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "schedule", "push"]], "job": [""], "workflow_name": "Station Docker Container Security Scan"}, {"check_id": "CKV2_GHA_1", "bc_check_id": null, "check_name": "Ensure top-level permissions are not set to write-all", "check_result": {"result": "FAILED", "evaluated_keys": ["permissions"]}, "code_block": [], "file_path": "/.github/workflows/simple-devops-audit.yml", "file_abs_path": "/tf/.github/workflows/simple-devops-audit.yml", "repo_file_path": "/tf/.github/workflows/simple-devops-audit.yml", "file_line_range": [0, 1], "resource": "on(Simple DevOps Security Audit)", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": [""], "workflow_name": "Simple DevOps Security Audit"}, {"check_id": "CKV2_GHA_1", "bc_check_id": null, "check_name": "Ensure top-level permissions are not set to write-all", "check_result": {"result": "FAILED", "evaluated_keys": ["permissions"]}, "code_block": [], "file_path": "/.github/workflows/station-security-audit.yml", "file_abs_path": "/tf/.github/workflows/station-security-audit.yml", "repo_file_path": "/tf/.github/workflows/station-security-audit.yml", "file_line_range": [17, 18], "resource": "on(\ud83d\udee1\ufe0f Station DevOps Security Audit)", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "workflow_dispatch"]], "job": [""], "workflow_name": "\ud83d\udee1\ufe0f Station DevOps Security Audit"}, {"check_id": "CKV2_GHA_1", "bc_check_id": null, "check_name": "Ensure top-level permissions are not set to write-all", "check_result": {"result": "FAILED", "evaluated_keys": ["permissions"]}, "code_block": [], "file_path": "/.github/workflows/station-security-scan.yml", "file_abs_path": "/tf/.github/workflows/station-security-scan.yml", "repo_file_path": "/tf/.github/workflows/station-security-scan.yml", "file_line_range": [0, 1], "resource": "on(Station Security Scan)", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": [""], "workflow_name": "Station Security Scan"}, {"check_id": "CKV2_GHA_1", "bc_check_id": null, "check_name": "Ensure top-level permissions are not set to write-all", "check_result": {"result": "FAILED", "evaluated_keys": ["permissions"]}, "code_block": [], "file_path": "/.github/workflows/devops-audit.yml", "file_abs_path": "/tf/.github/workflows/devops-audit.yml", "repo_file_path": "/tf/.github/workflows/devops-audit.yml", "file_line_range": [74, 75], "resource": "on(DevOps CICD Pipeline Audit)", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push", "workflow_dispatch"]], "job": [""], "workflow_name": "DevOps CICD Pipeline Audit"}, {"check_id": "CKV2_GHA_1", "bc_check_id": null, "check_name": "Ensure top-level permissions are not set to write-all", "check_result": {"result": "FAILED", "evaluated_keys": ["permissions"]}, "code_block": [], "file_path": "/.github/workflows/station-basic-test.yml", "file_abs_path": "/tf/.github/workflows/station-basic-test.yml", "repo_file_path": "/tf/.github/workflows/station-basic-test.yml", "file_line_range": [0, 1], "resource": "on(Station Container Basic Test)", "evaluations": null, "check_class": "checkov.common.graph.checks_infra.base_check", "fixed_definition": null, "entity_tags": null, "caller_file_path": null, "caller_file_line_range": null, "resource_address": null, "severity": null, "bc_category": null, "benchmarks": null, "description": null, "short_description": null, "vulnerability_details": null, "connected_node": null, "guideline": null, "details": [], "check_len": null, "definition_context_file_path": null, "triggers": [["pull_request", "push"]], "job": [""], "workflow_name": "Station Container Basic Test"}], "skipped_checks": [], "parsing_errors": []}, "summary": {"passed": 216, "failed": 8, "skipped": 0, "parsing_errors": 0, "resource_count": 0, "checkov_version": "3.2.467"}, "url": "Add an api key '--bc-api-key <api-key>' to see more detailed insights via https://bridgecrew.cloud"}]